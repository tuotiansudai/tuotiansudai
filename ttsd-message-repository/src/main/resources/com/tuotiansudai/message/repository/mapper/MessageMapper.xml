<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.tuotiansudai.message.repository.mapper.MessageMapper">

    <cache eviction="LRU" type="com.tuotiansudai.cache.MybatisRedisCache"/>

    <resultMap id="messageResultMap" type="MessageModel">
        <id column="id" property="id"/>
        <result column="title" property="title"/>
        <result column="template" property="template"/>
        <result column="template_txt" property="templateTxt"/>
        <result column="type" property="type"/>
        <result column="event_type" property="eventType"/>
        <result column="user_group" property="userGroup"/>
        <result column="channels" property="channels"
                typeHandler="com.tuotiansudai.message.repository.mybatis.MessageChannelListTypeHandler"/>
        <result column="message_category" property="messageCategory"/>
        <result column="web_url" property="webUrl"/>
        <result column="app_url" property="appUrl"/>
        <result column="status" property="status"/>
        <result column="read_count" property="readCount"/>
        <result column="push_id" property="pushId"/>
        <result column="activated_by" property="activatedBy"/>
        <result column="activated_time" property="activatedTime"/>
        <result column="valid_start_time" property="validStartTime"/>
        <result column="valid_end_time" property="validEndTime"/>
        <result column="updated_by" property="updatedBy"/>
        <result column="updated_time" property="updatedTime"/>
        <result column="created_by" property="createdBy"/>
        <result column="created_time" property="createdTime"/>
    </resultMap>

    <insert id="create" parameterType="MessageModel" useGeneratedKeys="true" keyProperty="id">
        insert into message (`title`, `template`, `template_txt`, `type`, `event_type`, `user_group`, `channels`,
        `message_category`, `web_url`, `app_url`, `status`, `read_count`, `push_id`, `activated_by`, `activated_time`,
        `valid_start_time`, `valid_end_time`, `updated_by`, `updated_time`, `created_by`, `created_time`)
        value(#{title}, #{template}, #{templateTxt}, #{type}, #{eventType},
        #{userGroup},
        #{channels, typeHandler=com.tuotiansudai.message.repository.mybatis.MessageChannelListTypeHandler},
        #{messageCategory}, #{webUrl}, #{appUrl}, #{status}, #{readCount}, #{pushId}, #{activatedBy}, #{activatedTime},
        #{validStartTime}, #{validEndTime}, #{updatedBy}, #{updatedTime}, #{createdBy}, #{createdTime})
    </insert>

    <update id="update" parameterType="MessageModel">
        update message
        set `title` = #{title},
            `template` = #{template},
            `template_txt` = #{templateTxt},
            `type` = #{type},
            `event_type` = #{eventType},
            `user_group` = #{userGroup},
            `channels` = #{channels, typeHandler=com.tuotiansudai.message.repository.mybatis.MessageChannelListTypeHandler},
            `message_category` = #{messageCategory},
            `web_url` = #{webUrl},
            `app_url` = #{appUrl},
            `status` = #{status},
            `read_count` = #{readCount},
            `push_id` = #{pushId},
            `activated_by` = #{activatedBy} ,
            `activated_time` = #{activatedTime},
            `valid_start_time` = #{validStartTime},
            `valid_end_time` = #{validEndTime},
            `updated_by` = #{updatedBy},
            `updated_time` = #{updatedTime},
            `created_by` = #{createdBy},
            `created_time` = #{createdTime}
        where `id` = #{id}
    </update>

    <select id="findActiveById" parameterType="long" resultMap="messageResultMap">
        select * from message where id = #{id} and deleted is false;
    </select>

    <select id="findById" parameterType="long" resultMap="messageResultMap">
        select * from message where id =#{id}
    </select>

    <select id="findActiveByEventType" parameterType="map" resultMap="messageResultMap">
        select * from message where event_type = #{eventType} and status = 'APPROVED' and message.valid_end_time > NOW()
        and message.valid_start_time &lt; NOW() and deleted = 0;
    </select>

    <select id="lockById" parameterType="long" resultMap="messageResultMap" useCache="false">
        select * from message where id = #{id} for update;
    </select>

    <select id="findMessageCount" parameterType="map" resultType="long">
        select count(1) from message
        <where>
            deleted is false
            <if test="title != null and title !=''">
                <![CDATA[and title like '%${title}%']]>
            </if>
            <if test="updatedBy != null and updatedBy !=''">
                <![CDATA[and updated_by like '%${updatedBy}%']]>
            </if>
            <if test="messageStatus != null">
                and status = #{messageStatus}
            </if>
            <if test="messageType != null">
                and type = #{messageType}
            </if>
            <if test="messageCategory != null">
                and message_category = #{messageCategory}
            </if>
        </where>
    </select>

    <select id="findMessagePagination" parameterType="map" resultMap="messageResultMap">
        select * from message
        <where>
            deleted = 0
            <if test="title != null and title !=''">
                <![CDATA[and title like '%${title}%']]>
            </if>
            <if test="updatedBy != null and updatedBy !=''">
                <![CDATA[and updated_by like '%${updatedBy}%']]>
            </if>
            <if test="messageStatus != null">
                and status = #{messageStatus}
            </if>
            <if test="messageType != null">
                and type = #{messageType}
            </if>
            <if test="messageCategory != null">
                and message_category = #{messageCategory}
            </if>
        </where>
        order by created_time desc
        limit #{index}, #{pageSize}
    </select>

    <select id="findAssignableManualMessages" parameterType="string" resultMap="messageResultMap">
        select * from message
        where deleted = 0
        and message.type = 'MANUAL'
        and message.status = 'APPROVED'
        and message.valid_end_time > NOW()
        and message.valid_start_time &lt; NOW()
        and not exists (select 1 from user_message where message.id = user_message.message_id and user_message.login_name = #{loginName})
    </select>

    <delete id="deleteById">
        UPDATE `message`
        SET
        `deleted` = 1,
        `updated_by` = #{updatedBy},
        `updated_time` = now()
        WHERE
        id = #{id}
    </delete>

</mapper>