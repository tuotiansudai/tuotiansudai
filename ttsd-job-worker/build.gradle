apply plugin: 'java'


dependencies {
    compile project(':ttsd-service'),
            project(':ttsd-quartz-extension'),
            project(':ttsd-point-service'),
            project(':ttsd-edxactivity-repository')
}

processResources.outputs.upToDateWhen { false }
processResources {

    def defaultProperties = 'all'
    if (project.hasProperty('work')) {
        defaultProperties = work;
    }
    String params = 'all,jpush,repay';

    if (params.indexOf(defaultProperties) < 0) {
        throw new GradleException("param is error,only all,jpush,repay")
    }

    def innerConfigPath = "${project.projectDir.getPath()}/src/main/resources"
    from("${innerConfigPath}/log4j.properties") {
        filter { String line ->
            if (line.startsWith("log4j.appender.D.File=")) {
                return "log4j.appender.D.File=/var/log/job-worker/${defaultProperties}-debug.log"
            }
            if (line.startsWith("log4j.appender.I.File=")) {
                return "log4j.appender.I.File=/var/log/job-worker/${defaultProperties}-info.log"
            }
            if (line.startsWith("log4j.appender.E.File=")) {
                return "log4j.appender.E.File=/var/log/job-worker/${defaultProperties}-error.log"
            }
            line
        }
        into '/'
    }
    from("${innerConfigPath}/job-worker.properties.deploy/job-worker-${defaultProperties}.properties") {
        into '/'
        rename "job-worker-${defaultProperties}.properties", 'job-worker.properties'
    }
}

distZip {
    def defaultProperties = 'all'
    if (project.hasProperty('work')) {
        defaultProperties = work;
    }
    archiveName baseName + '-' + defaultProperties + '.zip'
}


mainClassName = "com.tuotiansudai.scheduler.Main"
