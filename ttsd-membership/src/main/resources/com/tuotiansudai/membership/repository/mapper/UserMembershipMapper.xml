<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.tuotiansudai.membership.repository.mapper.UserMembershipMapper">

    <cache eviction="LRU" type="com.tuotiansudai.cache.MybatisRedisCache"/>

    <resultMap id="UserMembershipResultMap" type="UserMembershipModel">
        <id column="id" property="id"/>
        <result column="login_name" property="loginName"/>
        <result column="membership_id" property="membershipId"/>
        <result column="expired_time" property="expiredTime"/>
        <result column="created_time" property="createdTime"/>
        <result column="type" property="type"/>
    </resultMap>

    <resultMap id="UserMembershipItemResultMap" type="UserMembershipItemView">
        <id column="id" property="id"/>
        <result column="login_name" property="loginName"/>
        <result column="user_name" property="realName"/>
        <result column="mobile" property="mobile"/>
        <result column="membership_point" property="membershipPoint"/>
        <result column="level" property="membershipLevel"/>
        <result column="type" property="userMembershipType"/>
        <result column="register_time" property="registerTime"/>
        <result column="created_time" property="createdTime"/>
        <result column="expired_time" property="expiredTime"/>
    </resultMap>

    <insert id="create" parameterType="UserMembershipModel" useGeneratedKeys="true" keyProperty="id">
        insert into user_membership (login_name, membership_id, expired_time, created_time, type)
        value(#{loginName}, #{membershipId}, #{expiredTime}, #{createdTime}, #{type})
    </insert>

    <select id="findById" resultMap="UserMembershipResultMap" parameterType="long">
        select * from user_membership where id = #{id}
    </select>

    <select id="findByLoginName" resultMap="UserMembershipResultMap" parameterType="string">
        select * from user_membership where login_name = #{loginName}
    </select>

    <select id="findUserMembershipItemViews" resultMap="UserMembershipItemResultMap">
        SELECT * FROM (
        SELECT
        user_membership.id,
        user_membership.login_name,
        account.user_name,
        user.mobile,
        account.membership_point,
        membership.level,
        user_membership.type,
        user.register_time,
        user_membership.created_time,
        user_membership.expired_time
        FROM `aa`.`user_membership`
        JOIN `aa`.`membership`
        JOIN `aa`.`user`
        JOIN `aa`.`account` ON `user_membership`.`membership_id` = `membership`.`id`
        AND `user_membership`.`login_name` = `user`.`login_name`
        AND `user_membership`.`login_name` = `account`.`login_name`
        AND `user_membership`.`expired_time` > now()
        <where>
            <if test="loginName != null and loginName != ''">
                user_membership.login_name = #{loginName}
            </if>
            <if test="mobile != null and mobile != ''">
                AND user.mobile = #{mobile}
            </if>
            <if test="registerStartTime != null">
                AND user.register_time &gt;= #{registerStartTime}
            </if>
            <if test="registerEndTime != null">
                AND user.register_time &lt;= #{registerEndTime}
            </if>
            <if test="type != null and type.name() != 'ALL' ">
                AND user_membership.type = #{type}
            </if>
            <if test="levels != null and levels.size() > 0">
                AND membership.level in
                <foreach collection="levels" index="index" item="item" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
        </where>
        ORDER BY membership.level DESC) t
        GROUP BY login_name
        limit #{pageIndex}, #{pageSize}
    </select>

    <select id="findCountUserMembershipItemViews" resultType="int">
        SELECT COUNT(1) FROM (
        SELECT * FROM (
        SELECT
        user_membership.id,
        user_membership.login_name,
        account.user_name,
        user.mobile,
        account.membership_point,
        membership.level,
        user_membership.type,
        user.register_time,
        user_membership.created_time,
        user_membership.expired_time
        FROM `aa`.`user_membership`
        JOIN `aa`.`membership`
        JOIN `aa`.`user`
        JOIN `aa`.`account` ON `user_membership`.`membership_id` = `membership`.`id`
        AND `user_membership`.`login_name` = `user`.`login_name`
        AND `user_membership`.`login_name` = `account`.`login_name`
        AND `user_membership`.`expired_time` > now()
        <where>
            <if test="loginName != null and loginName != ''">
                user_membership.login_name = #{loginName}
            </if>
            <if test="mobile != null and mobile != ''">
                AND user.mobile = #{mobile}
            </if>
            <if test="registerStartTime != null">
                AND user.register_time &gt;= #{registerStartTime}
            </if>
            <if test="registerEndTime != null">
                AND user.register_time &lt;= #{registerEndTime}
            </if>
            <if test="type != null and type.name() != 'ALL' ">
                AND user_membership.type = #{type}
            </if>
            <if test="levels != null and levels.size() > 0">
                AND membership.level in
                <foreach collection="levels" index="index" item="item" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
        </where>
        ORDER BY membership.level DESC) t
        GROUP BY login_name ) t
    </select>

    <select id="findCurrentMaxByLoginName" resultMap="UserMembershipResultMap" parameterType="java.lang.String">
        SELECT user_membership.*
        FROM
        (SELECT *
        FROM user_membership
        WHERE login_name = #{loginName}
        AND expired_time > now()) user_membership
        JOIN membership ON user_membership.membership_id = membership.id
        ORDER BY membership.level DESC LIMIT 1
    </select>

    <select id="countMembershipByLevel" resultType="long" parameterType="int">
        select count(1)
        from user_membership
        join membership on user_membership.membership_id = membership.id
        where not exists (select 1
                          from user_membership other_user_membership
                          join membership other_membership on other_user_membership.membership_id = other_membership.id
                          where other_user_membership.id <![CDATA[ <> ]]> user_membership.id
                          and other_user_membership.login_name = user_membership.login_name
                          and other_membership.level > membership.level
                          and other_user_membership.expired_time > now())
        and user_membership.expired_time > now()
        and membership.level = #{level}
    </select>

    <select id="findByLoginNameAndMembershipId" resultMap="UserMembershipResultMap" parameterType="map">
        select * from user_membership
        where login_name = #{loginName}
        and membership_id =  #{membershipId}
        and expired_time > now()
    </select>

    <select id="findExpiredUserMembership" resultMap="UserMembershipResultMap" parameterType="date">
        select * from user_membership
        where datediff(#{expiredDate}, expired_time) = 0
    </select>
</mapper>