<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.tuotiansudai.repository.mapper.InvestMapper">

    <cache eviction="LRU" type="com.tuotiansudai.cache.MybatisRedisCache" />

    <resultMap id="investResultMap" type="InvestModel">
        <id column="id" property="id"></id>
        <result column="login_name" property="loginName"></result>
        <result column="loan_id" property="loanId"></result>
        <result column="amount" property="amount"></result>
        <result column="status" property="status"></result>
        <result column="source" property="source"></result>
        <result column="is_auto_invest" property="isAutoInvest"></result>
        <result column="channel" property="channel"></result>
        <result column="created_time" property="createdTime"></result>
    </resultMap>

    <resultMap id="investNotifyInfoMap" type="InvestNotifyInfo">
        <result column="loan_name" property="loanName"></result>
        <result column="mobile" property="mobile"></result>
        <result column="email" property="email"></result>
        <result column="amount" property="amount"></result>
        <result column="invest_id" property="investId"></result>
        <result column="periods" property="periods"></result>
    </resultMap>

    <resultMap id="investPaginationItemView" type="InvestPaginationItemView" extends="investResultMap">
        <result column="loan_id" property="loanId"></result>
        <result column="loan_name" property="loanName"></result>
        <result column="loan_type" property="loanType"></result>
        <result column="loan_status" property="loanStatus"></result>
        <result column="loan_periods" property="loanPeriods"></result>
        <result column="roles" property="roles"></result>
        <result column="referrer_login_name" property="referrerLoginName"></result>
        <result column="next_repay_date" property="nextRepayDate"></result>
        <result column="next_repay_amount" property="nextRepayAmount"></result>
    </resultMap>

    <sql id="columns">
        id, login_name, loan_id, amount, status, source, is_auto_invest, channel, created_time
    </sql>

    <insert id="create" parameterType="InvestModel">
        insert into invest ( <include refid="columns"></include> )
        value(#{id}, #{loginName}, #{loanId}, #{amount}, #{status}, #{source}, #{isAutoInvest}, #{channel}, #{createdTime})
    </insert>

    <update id="updateStatus" parameterType="map">
        update invest set status = #{status} where id = #{id}
    </update>

    <select id="findById" parameterType="long" resultMap="investResultMap">
        select <include refid="columns"></include>
        from invest
        where id = #{id}
    </select>

    <select id="findByLoginName" parameterType="map" resultMap="investResultMap">
        select invest.id, invest.login_name, invest.loan_id, invest.amount, invest.status, invest.source, invest.is_auto_invest, invest.created_time
        from invest
        inner join loan on invest.loan_id = loan.id
        where invest.login_name = #{loginName}
        and loan.status &lt;&gt; 'CANCEL'
        order by invest.created_time desc
        limit #{index}, #{pageSize}
    </select>

    <select id="findCountByLoginName" parameterType="map" resultType="long">
        select count(1)
        from invest
        inner join loan on invest.loan_id = loan.id
        where invest.login_name = #{loginName}
        and loan.status &lt;&gt; 'CANCEL'
    </select>

    <select id="findSuccessInvestsByLoanId" parameterType="long" resultMap="investResultMap">
        select <include refid="columns"></include>
        from invest
        where loan_id = #{loanId} and status = 'SUCCESS'
        order by created_time
    </select>

    <select id="sumSuccessInvestAmount" parameterType="map" resultType="long">
        select IFNULL(sum(amount),0)
        from invest
        where loan_id = #{loanId}
        and status = 'SUCCESS'
    </select>

    <select id="findByStatus" parameterType="map" resultMap="investResultMap">
        select <include refid="columns"></include>
        from invest
        where loan_id = #{loanId}
        and status = '${status}'
        order by created_time desc
        limit #{index}, #{pageSize}
    </select>

    <select id="findCountByStatus" parameterType="map" resultType="long">
        select count(1)
        from invest
        where loan_id = #{loanId}
        and status = '${status}'
    </select>

    <update id="cleanWaitingInvestBefore" parameterType="map">
        update invest set status = 'FAIL'
        where loan_id = #{loanId}
        and status = 'WAIT_PAY'
        and created_time &lt; #{beforeTime}
    </update>

    <select id="findWaitingInvestCountAfter" parameterType="map" resultType="int">
        select count(*)
        from invest
        where loan_id = #{loanId}
        and status = 'WAIT_PAY'
        and created_time &gt;= #{afterTime}
    </select>

    <select id="findSuccessInvestMobileEmailAndAmount" parameterType="long" resultMap="investNotifyInfoMap">
        select invest.id as invest_id, invest.amount, loan.name as loan_name, loan.periods, user.mobile, user.email
        from invest
        inner join loan on invest.loan_id = loan.id
        inner join user on user.login_name = invest.login_name
        where loan.id = #{loanId}
        and invest.status = 'SUCCESS'
    </select>

    <select id="sumSuccessInvestAmountByLoginName" parameterType="map" resultType="long">
        select IFNULL(sum(amount),0)
        from invest
        where loan_id = #{loanId} and login_name = #{loginName}
        and status = 'SUCCESS'
    </select>

    <select id="findInvestPagination" parameterType="map" resultMap="investPaginationItemView">
        select invest.*,
        loan.name as loan_name,
        loan.status as loan_status,
        loan.type as loan_type,
        loan.periods as loan_periods,
        u.referrer as referrer_login_name,
        (select group_concat(role order by role separator ", ") from user_role where login_name = invest.login_name) as roles,
        (select min(repay_date) from invest_repay where invest_repay.invest_id = invest.id and invest_repay.status = 'REPAYING') as next_repay_date,
        (select invest_repay.expected_interest + invest_repay.corpus - invest_repay.expected_fee
          from invest_repay where invest_repay.invest_id = invest.id and invest_repay.status = 'REPAYING'
          and invest_repay.period = (select min(invest_repay.period) from invest_repay where invest_repay.invest_id = invest.id and invest_repay.status = 'REPAYING')
        ) as next_repay_amount
        from invest
        inner join loan on invest.loan_id = loan.id
        inner join user u on u.login_name = invest.login_name
        <where>
            <if test="loanId != null">
                and loan.id = #{loanId}
            </if>
            <if test="investorLoginName != null and investorLoginName != ''">
                and invest.login_name = #{investorLoginName}
            </if>
            <if test="loanStatus != null">
                and loan.status = #{loanStatus}
            </if>
            <if test="investStatus != null">
                and invest.status = #{investStatus}
            </if>
            <if test="channel != null and channel != ''">
                and invest.channel = #{channel}
            </if>
            <if test="source != null and source != ''">
                and invest.source = #{source}
            </if>
            <if test="role != null and role != ''">
                and exists (select 1 from user_role where user_role.login_name=invest.login_name and user_role.role= #{role} )
            </if>
            <if test="startTime != null &amp;&amp; endTime != null">
                and invest.created_time between #{startTime} and #{endTime}
            </if>
        </where>
        order by invest.created_time desc, invest.id asc
        limit #{index}, #{pageSize}
    </select>

    <select id="findCountInvestPagination" parameterType="map" resultType="long">
        select count(1)
        from invest join loan on invest.loan_id = loan.id
        <where>
            <if test="loanId != null">
                and loan.id = #{loanId}
            </if>
            <if test="investorLoginName != null and investorLoginName != ''">
                and invest.login_name = #{investorLoginName}
            </if>
            <if test="loanStatus != null">
                and loan.status = #{loanStatus}
            </if>
            <if test="investStatus != null">
                and invest.status = #{investStatus}
            </if>
            <if test="channel != null and channel != ''">
                and invest.channel = #{channel}
            </if>
            <if test="source != null and source != ''">
                and invest.source = #{source}
            </if>
            <if test="role != null and role != ''">
                and exists (select 1 from user_role where user_role.login_name=invest.login_name and user_role.role= #{role} )
            </if>
            <if test="startTime != null &amp;&amp; endTime != null">
                and invest.created_time between #{startTime} and #{endTime}
            </if>
        </where>
    </select>

    <select id="sumInvestAmount" parameterType="map" resultType="long">
        select IFNULL(sum(invest.amount), 0) as amount
        from invest join loan on invest.loan_id = loan.id
        <where>
            <if test="loanId != null">
                and loan.id = #{loanId}
            </if>
            <if test="investorLoginName != null and investorLoginName != ''">
                and invest.login_name = #{investorLoginName}
            </if>
            <if test="loanStatus != null">
                and loan.status = #{loanStatus}
            </if>
            <if test="investStatus != null">
                and invest.status = #{investStatus}
            </if>
            <if test="channel != null and channel != ''">
                and invest.channel = #{channel}
            </if>
            <if test="source != null and source != ''">
                and invest.source = #{source}
            </if>
            <if test="role != null and role != ''">
                and exists (select 1 from user_role where user_role.login_name=invest.login_name and user_role.role= #{role} )
            </if>
            <if test="startTime != null &amp;&amp; endTime != null">
                and invest.created_time between #{startTime} and #{endTime}
            </if>
        </where>
    </select>

    <select id="sumSuccessNewbieInvestCountByLoginName" parameterType="String" resultType="int">
        select count(*)
        from invest
        inner join loan on invest.loan_id = loan.id
        where loan.activity_type = 'NEWBIE'
        and invest.login_name = #{loginName}
        and invest.status &lt;&gt; 'FAIL'
    </select>

    <select id="countSuccessInvest" parameterType="long" resultType="long">
        select count(*)
        from invest
        where loan_id = #{loanId} and status = 'SUCCESS'
    </select>

    <select id="findAllChannels" resultType="java.lang.String">
        select distinct channel from invest where channel is not NULL
    </select>

    <select id="countAutoInvest" parameterType="map" resultType="long">
        select count(*)
        from invest
        where loan_id = #{loanId}
        and invest.login_name = #{loginName}
        and source = 'AUTO'
    </select>
</mapper>