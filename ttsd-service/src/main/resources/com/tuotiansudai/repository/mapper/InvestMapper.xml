<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.tuotiansudai.repository.mapper.InvestMapper">

    <cache eviction="LRU" type="com.tuotiansudai.cache.MybatisRedisCache"/>

    <resultMap id="investResultMap" type="InvestModel">
        <id column="id" property="id"/>
        <result column="transfer_invest_id" property="transferInvestId"/>
        <result column="login_name" property="loginName"/>
        <result column="loan_id" property="loanId"/>
        <result column="amount" property="amount"/>
        <result column="status" property="status"/>
        <result column="transfer_status" property="transferStatus"/>
        <result column="source" property="source"/>
        <result column="is_auto_invest" property="isAutoInvest"/>
        <result column="channel" property="channel"/>
        <result column="is_no_password_invest" property="isNoPasswordInvest"/>
        <result column="invest_time" property="investTime"/>
        <result column="created_time" property="createdTime"/>
        <result column="trading_time" property="tradingTime"/>
        <result column="achievements" property="achievements"
                typeHandler="com.tuotiansudai.util.mybatis.InvestAchievementListTypeHandler"/>
        <result column="invest_fee_rate" property="investFeeRate"/>
    </resultMap>

    <resultMap id="investPaginationItemView" type="InvestPaginationItemView">
        <id column="invest_id" property="investId"/>
        <result column="loan_id" property="loanId"/>
        <result column="loan_name" property="loanName"/>
        <result column="loan_periods" property="loanPeriods"/>
        <result column="investor_login_name" property="investorLoginName"/>
        <result column="investor_username" property="investorUserName"/>
        <result column="investor_mobile" property="investorMobile"/>
        <result column="investor_roles" property="investorRoles"/>
        <result column="referrer_login_name" property="referrerLoginName"/>
        <result column="referrer_username" property="referrerUserName"/>
        <result column="referrer_mobile" property="referrerMobile"/>
        <result column="referrer_roles" property="referrerRoles"/>
        <result column="channel" property="channel"/>
        <result column="source" property="source"/>
        <result column="invest_time" property="investTime"/>
        <result column="auto_invest" property="autoInvest"/>
        <result column="invest_amount" property="investAmount"/>
        <result column="coupon_id" property="couponId"/>
        <result column="extra_rate" property="extraRate"/>
        <result column="extra_actual_interest" property="extraActualInterest"/>
        <result column="invest_status" property="investStatus"/>
        <result column="province" property="province"/>
        <result column="city" property="city"/>
        <result column="identity_number" property="identityNumber"/>
    </resultMap>

    <resultMap id="heroRankingView" type="HeroRankingView">
        <result column="login_name" property="loginName"/>
        <result column="sumAmount" property="sumAmount"/>
        <result column="user_name" property="userName"/>
        <result column="mobile" property="mobile"/>
    </resultMap>

    <resultMap id="investDataView" type="InvestDataView">
        <result column="productName" property="productName"></result>
        <result column="totalInvestAmount" property="totalInvestAmount"></result>
        <result column="countInvest" property="countInvest"></result>
        <result column="avgInvestAmount" property="avgInvestAmount"></result>
    </resultMap>

    <resultMap id="transferableInvestView" type="TransferableInvestView">
        <result column="loan_id" property="loanId"></result>
        <result column="invest_id" property="investId"></result>
        <result column="loan_name" property="loanName"></result>
        <result column="amount" property="amount"></result>
        <result column="next_repay_date" property="nextRepayDate"></result>
        <result column="next_repay_amount" property="nextRepayAmount"></result>
        <result column="create_time" property="createdTime"></result>
        <result column="base_rate" property="baseRate"></result>
        <result column="activity_rate" property="activityRate"></result>
        <result column="transfer_status" property="transferStatus"></result>

    </resultMap>

    <sql id="columns">
        id, transfer_invest_id, login_name, loan_id, amount, status, transfer_status, source, is_auto_invest, channel, is_no_password_invest, created_time, updated_time, invest_time, trading_time, achievements, invest_fee_rate
    </sql>

    <insert id="create" parameterType="InvestModel">
        insert into invest (
        <include refid="columns"></include>
        )
        value(#{id}, #{transferInvestId}, #{loginName}, #{loanId}, #{amount}, #{status}, #{transferStatus}, #{source},
        #{isAutoInvest}, #{channel}, #{isNoPasswordInvest}, #{createdTime}, now(), #{investTime}, #{tradingTime},
        #{achievements, typeHandler=com.tuotiansudai.util.mybatis.InvestAchievementListTypeHandler}, #{investFeeRate})
    </insert>

    <update id="update" parameterType="InvestModel">
        update invest set
        login_name = #{loginName},
        loan_id = #{loanId},
        amount = #{amount},
        status = #{status},
        source = #{source},
        is_auto_invest = #{isAutoInvest},
        channel = #{channel},
        is_no_password_invest = #{isNoPasswordInvest},
        created_time = #{createdTime},
        updated_time = now(),
        trading_time = #{tradingTime},
        achievements = #{achievements, typeHandler=com.tuotiansudai.util.mybatis.InvestAchievementListTypeHandler},
        invest_fee_rate = #{investFeeRate}
        where id = #{id}
    </update>

    <update id="updateTransferStatus" parameterType="map">
        update invest set transfer_status = #{transferStatus}, updated_time = now() where id = #{id}
    </update>

    <select id="findById" parameterType="long" resultMap="investResultMap">
        select
        <include refid="columns"></include>
        from invest
        where id = #{id}
    </select>

    <select id="lockById" parameterType="long" resultMap="investResultMap" useCache="false">
        select
        <include refid="columns"></include>
        from invest
        where id = #{id} for update
    </select>

    <select id="findLatestSuccessInvest" parameterType="string" resultMap="investResultMap">
        select
        <include refid="columns"></include>
        from invest
        where login_name = #{loginName}
        order by case when trading_time is null then created_time else trading_time end desc
        limit 1;
    </select>

    <select id="findPaginationByLoginName" parameterType="map" resultMap="investResultMap">
        select invest.id, invest.transfer_invest_id, invest.login_name, invest.loan_id, invest.amount, invest.status, invest.transfer_status, invest.source, invest.is_auto_invest, invest.created_time, invest.invest_time, invest.trading_time, invest.achievements
        from invest
        inner join loan on invest.loan_id = loan.id
        where invest.login_name = #{loginName}
        and loan.status &lt;&gt; 'CANCEL'
        order by case when invest.trading_time is null then invest.created_time else invest.trading_time end desc
        limit #{index}, #{pageSize}
    </select>

    <select id="findCountByLoginName" parameterType="map" resultType="long">
        select count(1)
        from invest
        inner join loan on invest.loan_id = loan.id
        where invest.login_name = #{loginName}
        and loan.status &lt;&gt; 'CANCEL'
    </select>

    <select id="findByLoginNameExceptTransfer" parameterType="map" resultMap="investResultMap">
        select invest.id, invest.transfer_invest_id, invest.login_name, invest.loan_id, invest.amount, invest.status,
        invest.transfer_status, invest.source, invest.is_auto_invest, invest.created_time, invest.invest_time
        from invest
        inner join loan on invest.loan_id = loan.id
        where invest.login_name = #{loginName}
        and loan.status &lt;&gt; 'CANCEL'
        and invest.transfer_invest_id is null
        order by invest.created_time desc
        <if test=" isPagination == true">
            limit #{index}, #{pageSize}
        </if>
    </select>
    <select id="findCountByLoginNameExceptTransfer" parameterType="map" resultType="long">
        select count(1)
        from invest
        inner join loan on invest.loan_id = loan.id
        where invest.login_name = #{loginName}
        and invest.transfer_invest_id is null
        and loan.status &lt;&gt; 'CANCEL'
    </select>

    <select id="findSuccessInvestsByLoanId" parameterType="long" resultMap="investResultMap">
        select
        <include refid="columns"></include>
        from invest
        where loan_id = #{loanId} and status = 'SUCCESS' and transfer_status != 'SUCCESS'
        order by trading_time
    </select>

    <select id="sumSuccessInvestAmount" parameterType="map" resultType="long">
        select IFNULL(sum(amount),0)
        from invest
        where loan_id = #{loanId}
        and status = 'SUCCESS' and transfer_invest_id is null
    </select>

    <select id="findByStatus" parameterType="map" resultMap="investResultMap">
        select
        <include refid="columns"></include>
        from invest
        where loan_id = #{loanId}
        and transfer_invest_id is null
        and status = '${status}'
        order by case when trading_time is null then created_time else trading_time end desc
        limit #{index}, #{pageSize}
    </select>

    <select id="findCountByStatus" parameterType="map" resultType="long">
        select count(1)
        from invest
        where loan_id = #{loanId}
        and transfer_invest_id is null
        and status = '${status}'
    </select>

    <update id="cleanWaitingInvest" parameterType="long">
        update invest set status = 'FAIL', updated_time = now()
        where loan_id = #{loanId}
        and status = 'WAIT_PAY'
    </update>

    <select id="findWaitingInvestCountAfter" parameterType="map" resultType="int">
        select count(*) from invest
        where loan_id = #{loanId}
        and status = 'WAIT_PAY'
        and created_time &gt;= #{afterTime}
    </select>

    <select id="sumSuccessInvestAmountByLoginName" parameterType="map" resultType="long">
        select IFNULL(sum(amount),0)
        from invest
        <where>
            <if test="loanId != null">
                and loan_id = #{loanId}
            </if>
            <if test="loginName != null">
                and login_name = #{loginName}
            </if>
            and loan_id != 1
        </where>
        and status = 'SUCCESS'
    </select>

    <select id="findInvestPagination" resultMap="investPaginationItemView">
        SELECT
        invest.id AS invest_id,
        loan.id AS loan_id,
        loan.name AS loan_name,
        loan.periods AS loan_periods,
        invest.login_name AS investor_login_name,
        (SELECT province FROM user WHERE login_name = invest.login_name) AS province,
        (SELECT city FROM user WHERE login_name = invest.login_name) AS city,
        (SELECT identity_number FROM account WHERE login_name = invest.login_name) AS identity_number,
        (SELECT user_name FROM account WHERE login_name = invest.login_name) AS investor_username,
        (SELECT mobile FROM user WHERE login_name = invest.login_name) AS investor_mobile,
        (SELECT GROUP_CONCAT(role ORDER BY role SEPARATOR ', ') FROM user_role WHERE login_name = invest.login_name) AS
        investor_roles,
        (SELECT referrer FROM user WHERE login_name = invest.login_name) AS referrer_login_name,
        (SELECT user_name FROM account WHERE login_name = (SELECT referrer FROM user WHERE login_name =
        invest.login_name)) AS referrer_username,
        (SELECT mobile FROM user WHERE login_name = (SELECT referrer FROM user WHERE login_name = invest.login_name)) AS
        referrer_mobile,
        (SELECT GROUP_CONCAT(role ORDER BY role SEPARATOR ', ') FROM user_role WHERE login_name = (SELECT referrer FROM
        user WHERE login_name = invest.login_name)) AS referrer_roles,
        invest.channel AS channel,
        invest.source AS source,
        invest.invest_time AS invest_time,
        invest.is_auto_invest AS auto_invest,
        invest.amount AS invest_amount,
        coupon.coupon_id AS coupon_id,
        invest_extra_rate.extra_rate AS extra_rate,
        invest_extra_rate.actual_interest AS extra_actual_interest,
        invest.status AS invest_status
        FROM
        (SELECT
        id, loan_id, login_name, channel, source, invest_time, is_auto_invest, amount, status, created_time,
        trading_time
        FROM
        `aa`.`invest`
        <where>
            invest.transfer_invest_id IS NULL
            <if test="loanId != null">
                AND invest.loan_id = #{loanId}
            </if>
            <if test="investorLoginName != null and investorLoginName != ''">
                AND invest.login_name = #{investorLoginName}
            </if>
            <if test="investStatus != null">
                AND invest.status = #{investStatus}
            </if>
            <if test="channel != null and channel != ''">
                AND invest.channel = #{channel}
            </if>
            <if test="source != null">
                AND invest.source = #{source}
            </if>
            <if test="role != null">role
                AND EXISTS (SELECT 1 FROM user_role WHERE user_role.login_name=invest.login_name AND user_role.role=
                #{role})
            </if>
            <if test="startTime != null">
                AND invest.invest_time &gt;= #{startTime}
            </if>
            <if test="endTime != null">
                AND invest.invest_time &lt;= #{endTime}
            </if>
        </where>
        )
        invest
        JOIN (SELECT id, name, periods FROM `aa`.`loan`) loan ON invest.loan_id = loan.id
        LEFT JOIN (SELECT user_coupon.coupon_id, user_coupon.invest_id, coupon.coupon_type FROM `aa`.`user_coupon` JOIN
        `aa`.`coupon` ON user_coupon.coupon_id = coupon.id) coupon ON coupon.invest_id = invest.id
        LEFT JOIN (SELECT extra_rate, actual_interest, invest_id FROM `aa`.`invest_extra_rate`) invest_extra_rate ON
        invest_extra_rate.invest_id = invest.id
        <where>
            <if test="preferenceType != null and preferenceType.name() == 'INVEST_BENEFIT'">
                AND invest_extra_rate.extra_rate IS NOT NULL
            </if>
            <if test="preferenceType != null and preferenceType.name() != 'INVEST_BENEFIT'">
                AND coupon.coupon_type = #{preferenceType}
            </if>
        </where>
        ORDER BY CASE invest.trading_time WHEN NULL THEN invest.created_time ELSE invest.trading_time END DESC,
        invest.id ASC
        limit #{index}, #{pageSize};
    </select>

    <select id="findInvestorInvestPagination" parameterType="map" resultMap="investResultMap">
        select invest.*
        from invest
        join loan on invest.loan_id = loan.id
        <where>
            and invest.login_name = #{loginName}
            <if test="startTime != null">
                and invest.created_time &gt; #{startTime}
            </if>
            <if test="endTime != null">
                and invest.created_time &lt; #{endTime}
            </if>
            <if test="loanStatus != null">
                AND (loan.status = #{loanStatus}
                OR ((#{loanStatus} = 'REPAYING' AND loan.product_type = 'EXPERIENCE' AND TO_DAYS(NOW()) -
                TO_DAYS(invest_time) &lt; loan.duration)
                OR (#{loanStatus} = 'COMPLETE' AND loan.product_type = 'EXPERIENCE' AND TO_DAYS(NOW()) -
                TO_DAYS(invest_time) &gt;= loan.duration)))
            </if>

            <if test="loanStatus != null &amp;&amp; loanStatus.name() == 'RAISING'">
                AND loan.product_type != 'EXPERIENCE'
            </if>
        </where>
        order by case when invest.trading_time is null then invest.created_time else invest.trading_time end desc,
        invest.id asc
        limit #{index}, #{pageSize}
    </select>

    <select id="countInvestorInvestPagination" parameterType="map" resultType="long">
        select count(1)
        from invest
        join loan on invest.loan_id = loan.id
        <where>
            and invest.login_name = #{loginName}
            <if test="startTime != null">
                and invest.created_time &gt; #{startTime}
            </if>
            <if test="endTime != null">
                and invest.created_time &lt; #{endTime}
            </if>
            <if test="loanStatus != null">
                AND (loan.status = #{loanStatus}
                OR ((#{loanStatus} = 'REPAYING' AND loan.product_type = 'EXPERIENCE' AND TO_DAYS(NOW()) -
                TO_DAYS(invest_time) &lt; loan.duration)
                OR (#{loanStatus} = 'COMPLETE' AND loan.product_type = 'EXPERIENCE' AND TO_DAYS(NOW()) -
                TO_DAYS(invest_time) &gt;= loan.duration)))
            </if>

            <if test="loanStatus != null &amp;&amp; loanStatus.name() == 'RAISING'">
                AND loan.product_type != 'EXPERIENCE'
            </if>
        </where>
    </select>

    <select id="findCountInvestPagination" parameterType="map" resultType="long">
        SELECT
        COUNT(1)
        FROM
        (SELECT
        id, loan_id
        FROM
        `aa`.`invest`
        <where>
            invest.transfer_invest_id IS NULL
            <if test="loanId != null">
                AND invest.loan_id = #{loanId}
            </if>
            <if test="investorLoginName != null and investorLoginName != ''">
                AND invest.login_name = #{investorLoginName}
            </if>
            <if test="investStatus != null">
                AND invest.status = #{investStatus}
            </if>
            <if test="channel != null and channel != ''">
                AND invest.channel = #{channel}
            </if>
            <if test="source != null">
                AND invest.source = #{source}
            </if>
            <if test="role != null and role != ''">
                AND EXISTS (SELECT 1 FROM user_role WHERE user_role.login_name=invest.login_name AND user_role.role=
                #{role})
            </if>
            <if test="startTime != null">
                AND invest.invest_time &gt;= #{startTime}
            </if>
            <if test="endTime != null">
                AND invest.invest_time &lt;= #{endTime}
            </if>
        </where>
        )
        invest
        JOIN (SELECT id, name, periods FROM `aa`.`loan`) loan ON invest.loan_id = loan.id
        LEFT JOIN (SELECT user_coupon.coupon_id, user_coupon.invest_id, coupon.coupon_type FROM `aa`.`user_coupon` JOIN
        `aa`.`coupon` ON user_coupon.coupon_id = coupon.id) coupon ON coupon.invest_id = invest.id
        LEFT JOIN (SELECT extra_rate, actual_interest, invest_id FROM `aa`.`invest_extra_rate`) invest_extra_rate ON
        invest_extra_rate.invest_id = invest.id
        <where>
            <if test="preferenceType != null and preferenceType.name() == 'INVEST_BENEFIT'">
                AND invest_extra_rate.extra_rate IS NOT NULL
            </if>
            <if test="preferenceType != null and preferenceType.name() != 'INVEST_BENEFIT'">
                AND coupon.coupon_type = #{preferenceType}
            </if>
        </where>
    </select>

    <select id="sumInvestAmount" parameterType="map" resultType="long">
        select IFNULL(sum(invest.amount), 0) as amount
        from invest join loan on invest.loan_id = loan.id
        <where>
            <if test="loanId != null">
                and loan.id = #{loanId}
            </if>
            <if test="investorLoginName != null and investorLoginName != ''">
                and invest.login_name = #{investorLoginName}
            </if>
            <if test="loanStatus != null">
                and loan.status = #{loanStatus}
            </if>
            <if test="investStatus != null">
                and invest.status = #{investStatus}
            </if>
            <if test="channel != null and channel != ''">
                and invest.channel = #{channel}
            </if>
            <if test="source != null">
                and invest.source = #{source}
            </if>
            <if test="role != null and role != ''">
                and exists (select 1 from user_role where user_role.login_name=invest.login_name and user_role.role=
                #{role} )
            </if>
            <if test="startTime != null &amp;&amp; endTime != null">
                and invest.created_time between #{startTime} and #{endTime}
            </if>
        </where>
    </select>

    <select id="sumInvestAmountConsole" resultType="long">
        SELECT
        IFNULL(sum(amount), 0) as sum_amount
        FROM
        (SELECT
        id, loan_id, amount
        FROM
        `aa`.`invest`
        <where>
            invest.transfer_invest_id IS NULL
            <if test="loanId != null">
                AND invest.loan_id = #{loanId}
            </if>
            <if test="investorLoginName != null and investorLoginName">
                AND invest.login_name = #{investorLoginName}
            </if>
            <if test="investStatus != null">
                AND invest.status = #{investStatus}
            </if>
            <if test="channel != null and channel != ''">
                AND invest.channel = #{channel}
            </if>
            <if test="source != null">
                AND invest.source = #{source}
            </if>
            <if test="role != null">
                AND EXISTS (SELECT 1 FROM user_role WHERE user_role.login_name=invest.login_name AND user_role.role=
                #{role})
            </if>
            <if test="startTime != null">
                AND invest.invest_time &gt;= #{startTime}
            </if>
            <if test="endTime != null">
                AND invest.invest_time &lt;= #{endTime}
            </if>
        </where>
        )
        invest
        JOIN (SELECT id, name, periods FROM `aa`.`loan`) loan ON invest.loan_id = loan.id
        LEFT JOIN (SELECT user_coupon.coupon_id, user_coupon.invest_id, coupon.coupon_type FROM `aa`.`user_coupon` JOIN
        `aa`.`coupon` ON user_coupon.coupon_id = coupon.id) coupon ON coupon.invest_id = invest.id
        LEFT JOIN (SELECT extra_rate, actual_interest, invest_id FROM `aa`.`invest_extra_rate`) invest_extra_rate ON
        invest_extra_rate.invest_id = invest.id
        <where>
            <if test="preferenceType != null and preferenceType.name() == 'INVEST_BENEFIT'">
                AND invest_extra_rate.extra_rate IS NOT NULL
            </if>
            <if test="preferenceType != null and preferenceType.name() != 'INVEST_BENEFIT'">
                AND coupon.coupon_type = #{preferenceType}
            </if>
        </where>
    </select>

    <select id="sumInvestAmountRanking" parameterType="map" resultType="long">
        select IFNULL(sum(amount), 0) as amount
        from invest
        where
            status = 'SUCCESS'
            and not exists (select 1 from user_role where user_role.login_name=invest.login_name and user_role.role= 'LOANER')
            and trading_time between #{startTime} and #{endTime}
    </select>

    <select id="sumSuccessInvestCountByLoginName" parameterType="String" resultType="int">
        select count(*)
        from invest join loan on invest.loan_id = loan.id and loan.product_type != 'EXPERIENCE'
        where invest.login_name = #{loginName}
        and invest.status = 'SUCCESS'
    </select>

    <select id="countSuccessInvest" parameterType="long" resultType="long">
        select count(*)
        from invest
        where loan_id = #{loanId} and status = 'SUCCESS'
    </select>

    <select id="findAllChannels" resultType="java.lang.String">
        select distinct channel from invest where channel is not NULL
    </select>

    <select id="findAllInvestChannels" resultType="java.lang.String">
        select IFNULL(channel,'其他') from invest group by channel order by channel desc
    </select>

    <select id="countAutoInvest" parameterType="map" resultType="long">
        select count(*)
        from invest
        where loan_id = #{loanId}
        and invest.login_name = #{loginName}
        and source = 'AUTO'
    </select>

    <select id="findInvestorLoginNames" resultType="java.lang.String">
        select login_name from invest where invest.status = 'SUCCESS'
    </select>

    <select id="findInvestorCount" resultType="long">
        select count(distinct(login_name)) from invest where invest.status = 'SUCCESS'
    </select>

    <select id="findRegisteredNotInvestCount" resultType="long">
        select count(*) from account a where not exists(select 1 from invest i where a.login_name = i.login_name and i.status='SUCCESS');
    </select>

    <select id="findNoInvestInThirtyDay" resultType="string">
        SELECT
        t.`login_name`
        FROM
        invest t
        WHERE t.`status` = 'SUCCESS'
        GROUP BY t.`login_name`
        HAVING MAX(t.`trading_time`) &lt; DATE_SUB(curdate(), INTERVAL 30 DAY)
    </select>

    <select id="getInvestDetail" resultMap="investDataView">
        <![CDATA[
         select case
            when loan.periods ='1' then 30
            when loan.periods ='3' then 90
            when loan.periods ='6' then 180
            ELSE 360 END as productName,
          IFNULL(sum(invest.amount), 0) as totalInvestAmount, COUNT(invest.id) as countInvest, ROUND(IFNULL(sum(invest.amount), 0)/ COUNT(invest.id)) as avgInvestAmount
          from invest join loan on invest.loan_id = loan.id
          where invest.status='SUCCESS'
          and invest.trading_time between '2015-07-01 00:00:00' and date_add(curdate(), interval '00:00:00' hour_second)
          group by loan.periods
          ORDER BY productName
        ]]>
    </select>

    <select id="countAchievementTimesByLoginName" parameterType="map" resultType="int">
        select count(1) from invest
        where login_name = #{loginName}
        and status = 'SUCCESS'
        and achievements like CONCAT('%', #{achievement}, '%')
        and trading_time between #{startTime} and #{endTime}
    </select>

    <select id="findFirstTradeTimeInvestByLoanId" parameterType="map" resultType="java.util.Date">
        select min(trading_time) from invest where status = 'SUCCESS' and loan_id = #{loanId}
    </select>

    <select id="findByLoanIdAndLoginName" parameterType="map" resultMap="investResultMap">
        select * from invest where loan_id = #{loanId} and login_name = #{loginName} and status = 'SUCCESS'
    </select>

    <select id="findHeroRankingByTradingTime" parameterType="map" resultMap="heroRankingView">
        SELECT
            invest.login_name,
            SUM(invest.amount) sumAmount,
            account.user_name,
            user.mobile
        FROM
            invest
        INNER JOIN
            account ON invest.login_name = account.login_name
        INNER JOIN
            user ON invest.login_name = user.login_name
        WHERE
            invest.status = 'SUCCESS'
        AND invest.transfer_invest_id IS NULL
        AND DATE_FORMAT(invest.trading_time, '%Y-%m-%d') = DATE_FORMAT(#{tradingTime},'%Y-%m-%d')
        AND invest.trading_time BETWEEN #{activityBeginTime} AND #{activityEndTime}
        AND NOT EXISTS
            (   SELECT
                  1
                FROM
                  transfer_application ta
                WHERE
                  ta.login_name = invest.login_name
                AND ta.application_time between #{activityBeginTime} and #{tradingTime}
            )
        GROUP BY login_name , account.user_name , user.mobile
        ORDER BY sumAmount DESC , MAX(invest.trading_time)
    </select>

    <select id="findHeroRankingByReferrer" parameterType="map" resultMap="heroRankingView">
        SELECT
          rr.`referrer_login_name` AS login_name,
          SUM(t.`amount`) AS sumAmount,
          a.`user_name`,
          u.`mobile`
        FROM
          referrer_relation rr
          JOIN invest t
            ON rr.`login_name` = t.`login_name`
            AND t.`status` = 'SUCCESS'
            AND DATE_FORMAT(t.`trading_time`, '%Y-%m-%d') = DATE_FORMAT(#{tradingTime}, '%Y-%m-%d')
            AND t.`trading_time` BETWEEN #{activityBeginTime}
            AND #{activityEndTime}
          JOIN account a
            ON rr.`referrer_login_name` = a.`login_name`
          JOIN user u
            ON rr.`referrer_login_name` = u.`login_name`
        WHERE rr.`level` = 1
        GROUP BY rr.`referrer_login_name`,
          a.`user_name`,
          u.`mobile`
        ORDER BY SUM(t.`amount`) DESC,
          MAX(t.`trading_time`)
        LIMIT #{index}, #{pageSize}
    </select>

    <select id="findInvestAchievementsByLoanId" parameterType="map" resultMap="investResultMap">
        select * from invest where loan_id = #{loanId} and status = 'SUCCESS' and achievements is not null and achievements != '' order by LOCATE('MAX_AMOUNT', achievements) desc, LOCATE('FIRST_INVEST', achievements) desc
    </select>

    <select id="findInvestorInvestWithoutTransferPagination" parameterType="map" resultMap="investResultMap">
        select invest.*
        from invest
        join loan on invest.loan_id = loan.id
        where invest.login_name = #{loginName}
        <if test="loanStatus.name() == 'COMPLETE' ">
            and (loan.status = #{loanStatus}
            OR ((#{loanStatus} = 'REPAYING' AND loan.product_type = 'EXPERIENCE' AND TO_DAYS(NOW()) -
            TO_DAYS(invest_time) &lt; loan.duration)
            OR (#{loanStatus} = 'COMPLETE' AND loan.product_type = 'EXPERIENCE' AND TO_DAYS(NOW()) -
            TO_DAYS(invest_time) &gt;= loan.duration)))
        </if>
        <if test="loanStatus.name() == 'REPAYING' ">
            and (loan.status in ('REPAYING','OVERDUE')
            OR ((#{loanStatus} = 'REPAYING' AND loan.product_type = 'EXPERIENCE' AND TO_DAYS(NOW()) -
            TO_DAYS(invest_time) &lt; loan.duration)
            OR (#{loanStatus} = 'COMPLETE' AND loan.product_type = 'EXPERIENCE' AND TO_DAYS(NOW()) -
            TO_DAYS(invest_time) &gt;= loan.duration)))
        </if>
        <if test="loanStatus.name() == 'RAISING' ">
            and loan.status in ('RAISING','RECHECK') and loan.product_type != 'EXPERIENCE'
        </if>
        and invest.`status` = 'SUCCESS' and invest.`transfer_invest_id` is null and invest.`transfer_status` !=
        'SUCCESS'
        order by case when invest.trading_time is null then invest.created_time else invest.trading_time end desc,
        invest.id asc
        limit #{index}, #{pageSize}
    </select>

    <select id="countInvestorInvestWithoutTransferPagination" parameterType="map" resultType="long">
        select count(1)
        from invest
        join loan on invest.loan_id = loan.id
        where invest.login_name = #{loginName}
        <if test="loanStatus.name() == 'COMPLETE' ">
            and loan.status = #{loanStatus}
        </if>
        <if test="loanStatus.name() == 'REPAYING' ">
            and loan.status in ('REPAYING','OVERDUE')
        </if>
        <if test="loanStatus.name() == 'RAISING' ">
            and loan.status in ('RAISING','RECHECK')
        </if>
        and invest.`status` = 'SUCCESS' and invest.`transfer_invest_id` is null and invest.`transfer_status` !=
        'SUCCESS'
    </select>

    <select id="countSuccessInvestByInvestTime" parameterType="map" resultMap="investResultMap">
        select *
        from invest
        where status = 'SUCCESS' and invest_time BETWEEN #{startTime} and #{endTime}
        <if test="loanId != null and loanId != '' ">
            and loan_id = #{loanId}
        </if>
    </select>

    <select id="findWebTransferableApplicationPaginationByLoginName" useCache="false" parameterType="map"
            resultMap="transferableInvestView">
        SELECT
        invest.loan_id,
        invest.id as invest_id,
        invest.amount ,
        invest.created_time,
        invest.transfer_status,
        loan.name as loan_name,
        loan.base_rate,
        loan.activity_rate,
        ( select
        min(ir.repay_date)
        from invest_repay ir
        where ir.invest_id = invest.id and ir.status in ('REPAYING')
        ) as next_repay_date,

        (select ir.expected_interest + ir.corpus - ir.expected_fee
        from invest_repay ir where ir.invest_id = invest.id and ir.status in ('REPAYING')
        and ir.period = (select min(ir.period) from invest_repay ir where ir.invest_id = invest.id and ir.status in
        ('REPAYING'))
        ) as next_repay_amount
        FROM
        invest
        INNER JOIN
        loan ON invest.loan_id = loan.id
        WHERE
        invest.login_name = #{loginName}
        AND loan.status = 'REPAYING'
        AND invest.status = 'SUCCESS'
        AND invest.transfer_status = 'TRANSFERABLE'
        AND invest.transfer_invest_id IS NULL
        AND DATEDIFF(DATE_FORMAT((SELECT min(lr.repay_date) FROM `loan_repay` lr where lr.`loan_id` = loan.`id`
        AND DATE(NOW()) >= DATE(loan.`recheck_time`) AND DATE(lr.`repay_date`) >=DATE(NOW())
        and lr.status = 'REPAYING'), '%Y-%m-%d'),
        DATE_FORMAT(NOW(), '%Y-%m-%d')) > (SELECT
        days_limit
        FROM
        transfer_rule)
        AND (NOT EXISTS (SELECT * FROM `transfer_application` ta1 where ta1.`transfer_invest_id` = invest.id)
        or DATEDIFF(DATE_FORMAT(NOW(), '%Y-%m-%d'),DATE_FORMAT((select max(ta2.application_time) from
        `transfer_application` ta2 where ta2.`transfer_invest_id` = invest.`id` and ta2.status = 'CANCEL'),'%Y-%m-%d'))
        &lt;&gt; 0)
        ORDER BY invest.created_time DESC
        limit #{index}, #{pageSize}
    </select>

    <select id="findWebCountTransferableApplicationPaginationByLoginName" useCache="false" parameterType="map"
            resultType="long">
        SELECT
        count(1)
        FROM
        invest
        INNER JOIN
        loan ON invest.loan_id = loan.id
        WHERE
        invest.login_name = #{loginName}
        AND loan.status = 'REPAYING'
        AND invest.status = 'SUCCESS'
        AND invest.transfer_status = 'TRANSFERABLE'
        AND invest.transfer_invest_id IS NULL
        AND DATEDIFF(DATE_FORMAT((SELECT min(lr.repay_date) FROM `loan_repay` lr where lr.`loan_id` = loan.`id`
        AND DATE(NOW()) >= DATE(loan.`recheck_time`) AND DATE(lr.`repay_date`) >=DATE(NOW())
        and lr.status = 'REPAYING'), '%Y-%m-%d'),
        DATE_FORMAT(NOW(), '%Y-%m-%d')) > (SELECT
        days_limit
        FROM
        transfer_rule)
        AND (NOT EXISTS (SELECT * FROM `transfer_application` ta1 where ta1.`transfer_invest_id` = invest.id)
        or DATEDIFF(DATE_FORMAT(NOW(), '%Y-%m-%d'),DATE_FORMAT((select max(ta2.application_time) from
        `transfer_application` ta2 where ta2.`transfer_invest_id` = invest.`id` and ta2.status = 'CANCEL'),'%Y-%m-%d'))
        &lt;&gt; 0)
    </select>


    <select id="findTransferableApplicationPaginationByLoginName" parameterType="map" resultMap="investResultMap"
            useCache="false">
        SELECT
        invest.id,
        invest.transfer_invest_id,
        invest.login_name,
        invest.loan_id,
        invest.amount,
        invest.status,
        invest.transfer_status,
        invest.source,
        invest.is_auto_invest,
        invest.created_time,
        invest.invest_time
        FROM
        invest
        INNER JOIN
        loan ON invest.loan_id = loan.id
        WHERE
        invest.login_name = #{loginName}
        AND loan.status = 'REPAYING'
        AND invest.status = 'SUCCESS'
        AND invest.transfer_status = 'TRANSFERABLE'
        AND invest.transfer_invest_id IS NULL
        AND DATEDIFF(DATE_FORMAT((SELECT min(lr.repay_date) FROM `loan_repay` lr where lr.`loan_id` = loan.`id`
        AND DATE(NOW()) >= DATE(loan.`recheck_time`) AND DATE(lr.`repay_date`) >=DATE(NOW())
        and lr.status = 'REPAYING'), '%Y-%m-%d'),
        DATE_FORMAT(NOW(), '%Y-%m-%d')) > (SELECT
        days_limit
        FROM
        transfer_rule)
        AND (NOT EXISTS (SELECT * FROM `transfer_application` ta1 where ta1.`transfer_invest_id` = invest.id)
        or DATEDIFF(DATE_FORMAT(NOW(), '%Y-%m-%d'),DATE_FORMAT((select max(ta2.application_time) from
        `transfer_application` ta2 where ta2.`transfer_invest_id` = invest.`id` and ta2.status = 'CANCEL'),'%Y-%m-%d'))
        &lt;&gt; 0)
        ORDER BY invest.created_time DESC
        limit #{index}, #{pageSize}
    </select>

    <select id="findCountTransferableApplicationPaginationByLoginName" parameterType="map" resultType="long"
            useCache="false">
        SELECT
        count(1)
        FROM
        invest
        INNER JOIN
        loan ON invest.loan_id = loan.id
        WHERE
        invest.login_name = #{loginName}
        AND loan.status = 'REPAYING'
        AND invest.status = 'SUCCESS'
        AND invest.transfer_status = 'TRANSFERABLE'
        AND invest.transfer_invest_id IS NULL
        AND DATEDIFF(DATE_FORMAT((SELECT min(lr.repay_date) FROM `loan_repay` lr where lr.`loan_id` = loan.`id`
        AND DATE(NOW()) >= DATE(loan.`recheck_time`) AND DATE(lr.`repay_date`) >=DATE(NOW())
        and lr.status = 'REPAYING'), '%Y-%m-%d'),
        DATE_FORMAT(NOW(), '%Y-%m-%d')) > (SELECT
        days_limit
        FROM
        transfer_rule)
        AND (NOT EXISTS (SELECT * FROM `transfer_application` ta1 where ta1.`transfer_invest_id` = invest.id)
        or DATEDIFF(DATE_FORMAT(NOW(), '%Y-%m-%d'),DATE_FORMAT((select max(ta2.application_time) from
        `transfer_application` ta2 where ta2.`transfer_invest_id` = invest.`id` and ta2.status = 'CANCEL'),'%Y-%m-%d'))
        &lt;&gt; 0)
    </select>

    <select id="findCountSuccessByLoginNameAndProductTypes" parameterType="map" resultType="int">
        select count(1) from invest i left join loan l on i.loan_id = l.id where i.login_name = #{loginName}
        and i.status = 'SUCCESS'
        <if test="productTypeList != null ">
            and l.product_type IN
            <foreach collection="productTypeList" item="productType" open="(" separator="," close=")">
                #{productType}
            </foreach>
        </if>
    </select>

    <select id="countInvestorSuccessInvestByInvestTime" parameterType="map" resultType="long">
        select count(1)
        from invest
        join loan on invest.loan_id = loan.id
        where invest.login_name = #{loginName}
        AND loan.product_type != 'EXPERIENCE'
        AND invest.status = 'SUCCESS'
        <if test="startTime != null">
            AND invest.invest_time &gt; #{startTime}
        </if>
        <if test="endTime != null">
            AND invest.invest_time &lt; #{endTime}
        </if>
    </select>

    <select id="findCountExperienceLoanByLoginName" parameterType="map" resultType="int">
        select count(1) from invest
        inner join loan on invest.loan_id = loan.id
        where invest.login_name = #{loginName}
        and loan.status &lt;&gt; 'CANCEL' and loan.product_type = 'EXPERIENCE'
    </select>

    <select id="findSuccessInvestByInvestTime" parameterType="map" resultMap="investResultMap">
        select *
        from invest
        where status = 'SUCCESS' and login_name = #{loginName} and created_time BETWEEN #{startTime} and #{endTime}
    </select>

</mapper>