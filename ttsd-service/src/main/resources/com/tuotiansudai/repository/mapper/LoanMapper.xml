<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.tuotiansudai.repository.mapper.LoanMapper">

    <cache eviction="LRU" type="com.tuotiansudai.cache.MybatisRedisCache" />

    <resultMap id="loanResultMap" type="LoanModel">
        <id column="id" property="id"></id>
        <result column="name" property="name"></result>
        <result column="agent_login_name" property="agentLoginName"></result>
        <result column="loaner_login_name" property="loanerLoginName"></result>
        <result column="loaner_user_name" property="loanerUserName"></result>
        <result column="loaner_identity_number" property="loanerIdentityNumber"></result>
        <result column="type" property="type"></result>
        <result column="periods" property="periods"></result>
        <result column="description_text" property="descriptionText"></result>
        <result column="description_html" property="descriptionHtml"></result>
        <result column="base_rate" property="baseRate"></result>
        <result column="loan_amount" property="loanAmount"></result>
        <result column="invest_fee_rate" property="investFeeRate"></result>
        <result column="min_invest_amount" property="minInvestAmount"></result>
        <result column="invest_increasing_amount" property="investIncreasingAmount"></result>
        <result column="max_invest_amount" property="maxInvestAmount"></result>
        <result column="activity_type" property="activityType"></result>
        <result column="product_type" property="productType"></result>
        <result column="activity_rate" property="activityRate"></result>
        <result column="contract_id" property="contractId"></result>
        <result column="fundraising_start_time" property="fundraisingStartTime"></result>
        <result column="fundraising_end_time" property="fundraisingEndTime"></result>
        <result column="raising_complete_time" property="raisingCompleteTime"></result>
        <result column="show_on_home" property="showOnHome"></result>
        <result column="created_time" property="createdTime"></result>

        <result column="created_login_name" property="createdLoginName"></result>

        <result column="verify_time" property="verifyTime"></result>

        <result column="verify_login_name" property="verifyLoginName"></result>

        <result column="recheck_time" property="recheckTime"></result>

        <result column="recheck_login_name" property="recheckLoginName"></result>

        <result column="status" property="status"></result>

        <result column="next_repay_date" property="nextRepayDate"></result>
        <result column="completed_date" property="completedDate"></result>
        <result column="unpaid_amount" property="unpaidAmount"></result>
        <result column="expected_repay_amount" property="expectedRepayAmount"></result>
        <result column="actual_repay_amount" property="actualRepayAmount"></result>
        <result column="update_time" property="updateTime"></result>
    </resultMap>

    <insert id="create" parameterType="com.tuotiansudai.repository.model.LoanModel">
        insert into loan(id, name, agent_login_name, loaner_login_name, loaner_user_name, loaner_identity_number, type, periods, description_text, description_html, base_rate, loan_amount, invest_fee_rate, min_invest_amount, invest_increasing_amount, max_invest_amount, activity_type, product_type, activity_rate, contract_id, fundraising_start_time, fundraising_end_time, show_on_home, created_time, created_login_name, verify_time, verify_login_name, recheck_time, recheck_login_name, status, update_time)
        values(#{id}, #{name}, #{agentLoginName}, #{loanerLoginName}, #{loanerUserName}, #{loanerIdentityNumber}, #{type}, #{periods}, #{descriptionText}, #{descriptionHtml}, #{baseRate}, #{loanAmount}, #{investFeeRate}, #{minInvestAmount}, #{investIncreasingAmount}, #{maxInvestAmount}, #{activityType}, #{productType}, #{activityRate}, #{contractId}, #{fundraisingStartTime}, #{fundraisingEndTime}, #{showOnHome}, #{createdTime}, #{createdLoginName}, #{verifyTime}, #{verifyLoginName}, #{recheckTime}, #{recheckLoginName}, #{status}, #{updateTime})
    </insert>

    <select id="findById" parameterType="long" resultMap="loanResultMap">
        select * from loan where id = #{loanId}
    </select>

    <select id="getCompletedXsInvest"  resultMap="loanResultMap">
        select * from loan where status = 'COMPLETE' and activity_type = 'NOVICE' limit 1;
    </select>

    <select id="findLoanListWeb" parameterType="map" resultMap="loanResultMap">
        select * from (
        select * from loan t
        where t.type in ('INVEST_INTEREST_MONTHLY_REPAY','LOAN_INTEREST_MONTHLY_REPAY')
        <if test="productType !=null">
            and t.product_type = #{productType}
        </if>
        <if test="status != null">
            and t.status = #{status}
        </if>
        <if test="status == null">
            and t.status != 'WAITING_VERIFY'
        </if>
        <if test="rateStart > 0 and rateStart != 0.14">
            and (t.base_rate + t.activity_rate) >= #{rateStart}
        </if>
        <if test="rateStart > 0 and rateStart == 0.14">
            and (t.base_rate + t.activity_rate) > #{rateStart}
        </if>
        <if test="rateEnd > 0 and rateEnd != 0.14">
            <![CDATA[ and (t.base_rate + t.activity_rate) < #{rateEnd} ]]>
        </if>
        <if test="rateEnd > 0 and rateEnd == 0.14">
            <![CDATA[ and (t.base_rate + t.activity_rate) <= #{rateEnd} ]]>
        </if>
        union all
        select * from loan l
        where l.type in ('INVEST_INTEREST_LUMP_SUM_REPAY','LOAN_INTEREST_LUMP_SUM_REPAY')
        <if test="productType !=null">
            and l.product_type = #{productType}
        </if>
        <if test="status != null">
            and l.status = #{status}
        </if>
        <if test="status == null">
            and l.status != 'WAITING_VERIFY'
        </if>
        <if test="rateStart > 0 and rateStart != 0.14">
            and (l.base_rate + l.activity_rate) >= #{rateStart}
        </if>
        <if test="rateStart > 0 and rateStart == 0.14">
            and (l.base_rate + l.activity_rate) > #{rateStart}
        </if>
        <if test="rateEnd > 0 and rateEnd != 0.14">
            <![CDATA[ and (l.base_rate + l.activity_rate) < #{rateEnd} ]]>
        </if>
        <if test="rateEnd > 0 and rateEnd == 0.14">
            <![CDATA[ and (l.base_rate + l.activity_rate) <= #{rateEnd} ]]>
        </if>
        ) temp
        order by case temp.status when 'RAISING' then '1' when 'PREHEAT' then '2' when 'RECHECK' then '3' when 'REPAYING' then '4' when 'COMPLETE' then '5' else '6' end,temp.created_time desc
        limit #{index} , 10
    </select>

    <select id="findLoanListCountWeb" parameterType="map" resultType="int">
        select count(*) from (
        select * from loan t
        where t.type in ('INVEST_INTEREST_MONTHLY_REPAY','LOAN_INTEREST_MONTHLY_REPAY')
        <if test="productType !=null">
            and t.product_type = #{productType}
        </if>
        <if test="status != null">
            and t.status = #{status}
        </if>
        <if test="status == null">
            and t.status != 'WAITING_VERIFY'
        </if>
        <if test="rateStart > 0 and rateStart != 0.14">
            and (t.base_rate + t.activity_rate) >= #{rateStart}
        </if>
        <if test="rateStart > 0 and rateStart == 0.14">
            and (t.base_rate + t.activity_rate) > #{rateStart}
        </if>
        <if test="rateEnd > 0 and rateEnd != 0.14">
            <![CDATA[ and (t.base_rate + t.activity_rate) < #{rateEnd} ]]>
        </if>
        <if test="rateEnd > 0 and rateEnd == 0.14">
            <![CDATA[ and (t.base_rate + t.activity_rate) <= #{rateEnd} ]]>
        </if>
        union all
        select * from loan l
        where l.type in ('INVEST_INTEREST_LUMP_SUM_REPAY','LOAN_INTEREST_LUMP_SUM_REPAY')
        <if test="productType !=null">
            and l.product_type = #{productType}
        </if>
        <if test="status != null">
            and l.status = #{status}
        </if>
        <if test="status == null">
            and l.status != 'WAITING_VERIFY'
        </if>
        <if test="rateStart > 0 and rateStart != 0.14">
            and (l.base_rate + l.activity_rate) >= #{rateStart}
        </if>
        <if test="rateStart > 0 and rateStart == 0.14">
            and (l.base_rate + l.activity_rate) > #{rateStart}
        </if>
        <if test="rateEnd > 0 and rateEnd != 0.14">
            <![CDATA[ and (l.base_rate + l.activity_rate) < #{rateEnd} ]]>
        </if>
        <if test="rateEnd > 0 and rateEnd == 0.14">
            <![CDATA[ and (l.base_rate + l.activity_rate) <= #{rateEnd} ]]>
        </if>
        ) temp
    </select>

    <select id="findByStatus" resultMap="loanResultMap">
        select * from loan where status = #{status}
    </select>

    <select useCache="false" id="findRepayingPaginationByAgentLoginName" parameterType="map" resultMap="loanResultMap">
        select *,
            (select min(loan_repay.repay_date)
             from loan_repay
             where loan.id=loan_repay.loan_id and loan_repay.status in ('REPAYING', 'WAIT_PAY', 'OVERDUE')) as next_repay_date,
            (select sum(loan_repay.corpus) + sum(loan_repay.expected_interest) + sum(loan_repay.default_interest)
             from loan_repay
             where loan.id=loan_repay.loan_id and loan_repay.status != 'COMPLETE' ) as unpaid_amount
        from loan
        where agent_login_name = #{agentLoginName} and status in ('REPAYING', 'WAIT_PAY', 'OVERDUE')
              and
              (
                  (select min(loan_repay.repay_date) from loan_repay where loan.id=loan_repay.loan_id and loan_repay.status in ('REPAYING', 'WAIT_PAY', 'OVERDUE')) between #{startTime} and #{endTime}
              or
                  (select min(loan_repay.repay_date) from loan_repay where loan.id=loan_repay.loan_id and loan_repay.status = 'COMPLETE') between #{startTime} and #{endTime}
              )
        order by next_repay_date asc, id asc
        limit #{index}, #{pageSize}
    </select>

    <select useCache="false" id="findCountRepayingByAgentLoginName" parameterType="map" resultType="long">
        select count(1) from loan
        where agent_login_name = #{agentLoginName} and status in ('REPAYING', 'OVERDUE')
              and
              (
                  (select min(loan_repay.repay_date) from loan_repay where loan.id=loan_repay.loan_id and loan_repay.status in ('REPAYING', 'WAIT_PAY', 'OVERDUE')) between #{startTime} and #{endTime}
              or
                  (select min(loan_repay.repay_date) from loan_repay where loan.id=loan_repay.loan_id and loan_repay.status = 'COMPLETE') between #{startTime} and #{endTime}
              )
    </select>

    <select useCache="false" id="findCompletedPaginationByAgentLoginName" parameterType="map" resultMap="loanResultMap">
        select *,
        (select max(loan_repay.actual_repay_date)
        from loan_repay
        where loan.id=loan_repay.loan_id) as completed_date,
        (select sum(loan_repay.corpus) + sum(loan_repay.expected_interest)
        from loan_repay
        where loan.id=loan_repay.loan_id) as expected_repay_amount,
        (select sum(loan_repay.corpus) + sum(loan_repay.actual_interest) + sum(loan_repay.default_interest)
        from loan_repay
        where loan.id=loan_repay.loan_id) as actual_repay_amount
        from loan
        where agent_login_name = #{agentLoginName} and status = 'COMPLETE'
        and (select max(loan_repay.actual_repay_date) from loan_repay where loan.id=loan_repay.loan_id) between #{startTime} and #{endTime}
        order by completed_date desc, id asc
        limit #{index}, #{pageSize}
    </select>

    <select useCache="false" id="findCountCompletedByAgentLoginName" parameterType="map" resultType="long">
        select count(1) from loan
        where agent_login_name = #{agentLoginName} and status = 'COMPLETE'
        and (select max(loan_repay.actual_repay_date) from loan_repay where loan.id=loan_repay.loan_id) between #{startTime} and #{endTime}
    </select>

    <select useCache="false" id="findCanceledPaginationByAgentLoginName" parameterType="map" resultMap="loanResultMap">
        select * from loan
        where agent_login_name = #{agentLoginName} and status = 'CANCEL' and recheck_time between #{startTime} and #{endTime}
        order by recheck_time desc, id asc
        limit #{index}, #{pageSize}
    </select>

    <select useCache="false" id="findCountCanceledByAgentLoginName" parameterType="map" resultType="long">
        select count(1) from loan
        where agent_login_name = #{agentLoginName} and status = 'CANCEL' and recheck_time between #{startTime} and #{endTime}
    </select>

    <update id="update" parameterType="com.tuotiansudai.repository.model.LoanModel">
        update loan
        <trim prefix="set" suffixOverrides=",">
            <if test="name !=null and name!=''">
                name = #{name},
            </if>
            <if test="agentLoginName !=null and agentLoginName!=''">
                agent_login_name = #{agentLoginName},
            </if>
            <if test="loanerLoginName !=null and loanerLoginName!=''">
                loaner_login_name = #{loanerLoginName},
            </if>
            <if test="loanerUserName !=null and loanerUserName!=''">
                loaner_user_name = #{loanerUserName},
            </if>
            <if test="loanerIdentityNumber !=null and loanerIdentityNumber!=''">
                loaner_identity_number= #{loanerIdentityNumber},
            </if>
            <if test="type !=null">
                type = #{type},
            </if>
            <if test="periods !=null and periods!=''">
                periods = #{periods},
            </if>
            <if test="descriptionText !=null and descriptionText!=''">
                description_text = #{descriptionText},
            </if>
            <if test="descriptionHtml !=null and descriptionHtml!=''">
                description_html = #{descriptionHtml},
            </if>
            <if test="loanAmount !=null and loanAmount!=''">
                loan_amount = #{loanAmount},
            </if>
            <if test="investFeeRate !=null and investFeeRate!=''">
                invest_fee_rate = #{investFeeRate},
            </if>
            <if test="minInvestAmount !=null and minInvestAmount!=''">
                min_invest_amount = #{minInvestAmount},
            </if>
            <if test="investIncreasingAmount !=null and investIncreasingAmount!=''">
                invest_increasing_amount = #{investIncreasingAmount},
            </if>
            <if test="maxInvestAmount !=null and maxInvestAmount!=''">
                max_invest_amount = #{maxInvestAmount},
            </if>
            <if test="activityType !=null">
                activity_type = #{activityType},
            </if>
            <if test="productType != null">
                product_type = #{productType},
            </if>
            <if test="activityRate !=null">
                activity_rate = #{activityRate},
            </if>
            <if test="baseRate != null and baseRate != ''">
                base_rate = #{baseRate},
            </if>
            <if test="contractId !=null and contractId!=''">
                contract_id = #{contractId},
            </if>
            <if test="fundraisingStartTime !=null">
                fundraising_start_time = #{fundraisingStartTime},
            </if>
            <if test="fundraisingEndTime !=null">
                fundraising_end_time = #{fundraisingEndTime},
            </if>
            <if test="raisingCompleteTime !=null">
                raising_complete_time = #{raisingCompleteTime},
            </if>
            <if test="showOnHome !=null">
                show_on_home = #{showOnHome},
            </if>
            <if test="verifyTime !=null">
                verify_time = #{verifyTime},
            </if>
            <if test="verifyLoginName != null">
                verify_login_name = #{verifyLoginName},
            </if>
            <if test="recheckTime !=null">
                recheck_time = #{recheckTime},
            </if>
            <if test="recheckLoginName != null">
                recheck_login_name = #{recheckLoginName},
            </if>
            <if test="status !=null">
                status = #{status},
            </if>
            <if test="updateTime != null">
                update_time = #{updateTime}
            </if>

        </trim>
        where id = #{id}
    </update>

    <update id="updateStatus" parameterType="map">
        update loan set status = #{status} where id = #{loanId}
    </update>

    <select id="findLoanList" parameterType="map" resultMap="loanResultMap">
        select * from loan t
        <where>
            <if test="status != null">
                t.status = #{status}
            </if>
            <if test="loanId != null">
                and t.id = #{loanId}
            </if>
            <if test="loanName != null and loanName != ''">
                and t.name like CONCAT(CONCAT('%', #{loanName}),'%')
            </if>
            <if test="startTime != null">
                and t.created_time >= #{startTime}
            </if>
            <if test="endTime != null">
                <![CDATA[ and t.created_time <= #{endTime} ]]>
            </if>
        </where>
        order by t.created_time desc
        <if test="currentPageNo >= 0">
            limit #{currentPageNo}, #{pageSize}
        </if>
    </select>

    <select id="findLoanListCount" parameterType="map" resultType="int">
        select count(*) from loan t
        <where>
            <if test="status != null">
                t.status = #{status}
            </if>
            <if test="loanId != null">
                and t.id = #{loanId}
            </if>
            <if test="loanName != null and loanName != ''">
                and t.name like CONCAT(CONCAT('%', #{loanName}),'%')
            </if>
            <if test="startTime != null">
                and t.created_time >= #{startTime}
            </if>
            <if test="endTime != null">
                <![CDATA[ and t.created_time <= #{endTime} ]]>
            </if>
        </where>
    </select>

    <update id="updateRaisingCompleteTime" parameterType="map">
        update loan set raising_complete_time = #{raisingCompleteTime} where id = #{loanId}
    </update>

    <select id="findHomeLoan" resultMap="loanResultMap">
        (select * from loan
        where <![CDATA[ loan.status <> 'WAITING_VERIFY' ]]>
        and loan.product_type = 'SYL'
        order by case loan.status when 'RAISING' then '1' when 'PREHEAT' then '2' when 'RECHECK' then '3' when 'REPAYING' then '4' when 'COMPLETE' then '5' else '6' end, loan.created_time desc, loan.id desc
        limit 0, 1)
        UNION
        (select * from loan
        where <![CDATA[ loan.status <> 'WAITING_VERIFY' ]]>
        and loan.product_type = 'WYX'
        order by case loan.status when 'RAISING' then '1' when 'PREHEAT' then '2' when 'RECHECK' then '3' when 'REPAYING' then '4' when 'COMPLETE' then '5' else '6' end, loan.created_time desc, loan.id desc
        limit 0, 1)
        UNION
        (select * from loan
        where <![CDATA[ loan.status <> 'WAITING_VERIFY' ]]>
        and loan.product_type = 'JYF'
        order by case loan.status when 'RAISING' then '1' when 'PREHEAT' then '2' when 'RECHECK' then '3' when 'REPAYING' then '4' when 'COMPLETE' then '5' else '6' end, loan.created_time desc, loan.id desc
        limit 0, 1)
    </select>
</mapper>