<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.tuotiansudai.repository.mapper.LoanMapper">

    <cache eviction="LRU" type="com.tuotiansudai.cache.MybatisRedisCache"/>

    <resultMap id="loanResultMap" type="LoanModel">
        <id column="id" property="id"/>
        <result column="name" property="name"/>
        <result column="agent_login_name" property="agentLoginName"/>
        <result column="loaner_login_name" property="loanerLoginName"/>
        <result column="loaner_user_name" property="loanerUserName"/>
        <result column="loaner_identity_number" property="loanerIdentityNumber"/>
        <result column="type" property="type"/>
        <result column="periods" property="periods"/>
        <result column="duration" property="duration"/>
        <result column="description_text" property="descriptionText"/>
        <result column="description_html" property="descriptionHtml"/>
        <result column="pledge_type" property="pledgeType"/>
        <result column="base_rate" property="baseRate"/>
        <result column="loan_amount" property="loanAmount"/>
        <result column="min_invest_amount" property="minInvestAmount"/>
        <result column="invest_increasing_amount" property="investIncreasingAmount"/>
        <result column="max_invest_amount" property="maxInvestAmount"/>
        <result column="activity_type" property="activityType"/>
        <result column="product_type" property="productType"/>
        <result column="activity_rate" property="activityRate"/>
        <result column="contract_id" property="contractId"/>
        <result column="fundraising_start_time" property="fundraisingStartTime"/>
        <result column="fundraising_end_time" property="fundraisingEndTime"/>
        <result column="raising_complete_time" property="raisingCompleteTime"/>
        <result column="show_on_home" property="showOnHome"/>
        <result column="created_time" property="createdTime"/>
        <result column="created_login_name" property="createdLoginName"/>
        <result column="verify_time" property="verifyTime"/>
        <result column="verify_login_name" property="verifyLoginName"/>
        <result column="recheck_time" property="recheckTime"/>
        <result column="recheck_login_name" property="recheckLoginName"/>
        <result column="status" property="status"/>
        <result column="first_invest_achievement_id" property="firstInvestAchievementId"/>
        <result column="max_amount_achievement_id" property="maxAmountAchievementId"/>
        <result column="last_invest_achievement_id" property="lastInvestAchievementId"/>
        <result column="next_repay_date" property="nextRepayDate"/>
        <result column="completed_date" property="completedDate"/>
        <result column="unpaid_amount" property="unpaidAmount"/>
        <result column="expected_repay_amount" property="expectedRepayAmount"/>
        <result column="actual_repay_amount" property="actualRepayAmount"/>
        <result column="update_time" property="updateTime"/>
    </resultMap>

    <resultMap id="loanAchievementView" type="LoanAchievementView">
        <result column="loan_id" property="loanId"/>
        <result column="name" property="name"/>
        <result column="loan_status" property="loanStatus"/>
        <result column="periods" property="periods"/>
        <result column="loan_amount" property="loanAmount"/>
        <result column="raising_complete_time" property="raisingCompleteTime"/>
        <result column="fundraising_start_time" property="fundraisingStartTime"/>
        <result column="first_invest_achievement_id" property="firstInvestAchievementId"/>
        <result column="first_invest_login_name" property="firstInvestLoginName"/>
        <result column="first_invest_amount" property="firstInvestAmount"/>
        <result column="last_invest_achievement_id" property="lastInvestAchievementId"/>
        <result column="last_invest_login_name" property="lastInvestLoginName"/>
        <result column="last_invest_amount" property="lastInvestAmount"/>
        <result column="max_amount_achievement_id" property="maxAmountAchievementId"/>
        <result column="max_amount_login_name" property="maxAmountLoginName"/>
        <result column="max_amount" property="maxAmount"/>
    </resultMap>

    <insert id="create" parameterType="com.tuotiansudai.repository.model.LoanModel">
        insert into loan(id, name, agent_login_name, loaner_login_name, loaner_user_name, loaner_identity_number, type,
        periods, duration, description_text, description_html, pledge_type, base_rate, loan_amount, min_invest_amount,
        invest_increasing_amount, max_invest_amount, activity_type, product_type, activity_rate, contract_id, fundraising_start_time,
        fundraising_end_time, show_on_home, created_time, created_login_name, verify_time, verify_login_name, recheck_time,
        recheck_login_name, status, update_time)
        values(#{id}, #{name}, #{agentLoginName}, #{loanerLoginName}, #{loanerUserName}, #{loanerIdentityNumber}, #{type},
        #{periods}, #{duration}, '', '', #{pledgeType}, #{baseRate}, #{loanAmount}, #{minInvestAmount},
        #{investIncreasingAmount}, #{maxInvestAmount}, #{activityType}, #{productType}, #{activityRate}, #{contractId}, #{fundraisingStartTime},
        #{fundraisingEndTime}, #{showOnHome}, #{createdTime}, #{createdLoginName}, #{verifyTime}, #{verifyLoginName},
        #{recheckTime}, #{recheckLoginName}, #{status}, #{updateTime})
    </insert>

    <select id="findById" parameterType="long" resultMap="loanResultMap">
        select * from loan where id = #{loanId}
    </select>

    <select id="findLoanListWeb" parameterType="map" resultMap="loanResultMap">
        SELECT
        *
        FROM
        loan temp
        WHERE
        1 = 1
        and temp.status not in ('WAITING_VERIFY','CANCEL')
        <if test="name !=null and name!=''">
            and temp.name = #{name}
        </if>
        <if test="status != null">
            and temp.status = #{status}
        </if>
        <if test="status == null">
            and temp.status != 'WAITING_VERIFY' and temp.status != 'CANCEL'
        </if>
        <if test="rateStart != 0">
            <if test="rateEnd !=0">
                <![CDATA[ and (temp.base_rate + temp.activity_rate) >=  #{rateStart} ]]>
            </if>
            <if test="rateEnd ==0">
                <![CDATA[ and (temp.base_rate + temp.activity_rate) >  #{rateStart} ]]>
            </if>

        </if>
        <if test="rateEnd != 0">
            <![CDATA[ and (temp.base_rate + temp.activity_rate) <=  #{rateEnd} ]]>
        </if>

        <if test="durationStart != 0 and durationEnd != 0">
            and temp.duration BETWEEN #{durationStart} and #{durationEnd}
        </if>
        ORDER BY CASE temp.status
        WHEN 'RAISING' THEN '1'
        WHEN 'PREHEAT' THEN '2'
        ELSE 3 END,
        CASE WHEN temp.activity_type = 'NEWBIE' and temp.status in ('RAISING','PREHEAT') THEN '1' ELSE 2 END,
        CASE WHEN temp.status in ('RAISING','PREHEAT') THEN duration END,
        CASE WHEN temp.status in ('RAISING','PREHEAT','RECHECK') THEN verify_time END DESC,
        CASE WHEN temp.status in ('RAISING','PREHEAT','RECHECK') THEN created_time END DESC,
        CASE WHEN temp.status in ('REPAYING','OVERDUE','COMPLETE') THEN recheck_time END DESC
        limit #{index} , 10
    </select>

    <select id="findLoanListCountWeb" parameterType="map" resultType="int">
        select count(*) from (
        select * from loan t
        where 1=1
        <if test="name !=null and name != ''">
            and t.name = #{name}
        </if>
        <if test="status != null">
            and t.status = #{status}
        </if>
        <if test="status == null">
            and t.status != 'WAITING_VERIFY' and t.status != 'CANCEL'
        </if>
        <if test="rateStart != 0">
            <if test="rateEnd !=0">
                <![CDATA[ and (t.base_rate + t.activity_rate) >=  #{rateStart} ]]>
            </if>
            <if test="rateEnd ==0">
                <![CDATA[ and (t.base_rate + t.activity_rate) >  #{rateStart} ]]>
            </if>

        </if>
        <if test="rateEnd != 0">
            <![CDATA[ and (t.base_rate + t.activity_rate) <=  #{rateEnd} ]]>
        </if>
        <if test="durationStart != 0 and durationEnd != 0">
            and t.duration BETWEEN #{durationStart} and #{durationEnd}
        </if>
        ) temp
    </select>

    <select id="findLoanListMobileApp" parameterType="map" resultMap="loanResultMap">
        SELECT
        *
        FROM
        loan temp
        WHERE
        1 = 1
        and temp.status not in ('WAITING_VERIFY','CANCEL')
        <if test="productType !=null">
            and temp.product_type = #{productType}
        </if>
        <if test="status != null">
            and temp.status = #{status}
        </if>
        <if test="rateStart != 0">
            <if test="rateEnd !=0">
                <![CDATA[ and (temp.base_rate + temp.activity_rate) >=  #{rateStart} ]]>
            </if>
            <if test="rateEnd ==0">
                <![CDATA[ and (temp.base_rate + temp.activity_rate) >  #{rateStart} ]]>
            </if>
        </if>
        <if test="rateEnd != 0">
            <![CDATA[ and (temp.base_rate + temp.activity_rate) <=  #{rateEnd}]]>
        </if>
        ORDER BY CASE temp.status
        WHEN 'RAISING' THEN '1'
        WHEN 'PREHEAT' THEN '2'
        ELSE 3 END,
        CASE WHEN temp.activity_type = 'NEWBIE' and temp.status in ('RAISING','PREHEAT') THEN '1' ELSE 2 END,
        CASE WHEN temp.status in ('RAISING','PREHEAT') THEN duration END,
        CASE WHEN temp.status in ('RAISING','PREHEAT','RECHECK') THEN verify_time END DESC,
        CASE WHEN temp.status in ('RAISING','PREHEAT','RECHECK') THEN created_time END DESC,
        CASE WHEN temp.status in ('REPAYING','OVERDUE','COMPLETE') THEN recheck_time END DESC
        limit #{index} , 10
    </select>

    <select id="findLoanListCountMobileApp" parameterType="map" resultType="int">
        select count(*) from (
        select * from loan t
        where 1=1
        <if test="productType !=null">
            and t.product_type = #{productType}
        </if>
        <if test="status != null">
            and t.status = #{status}
        </if>
        <if test="status == null">
            and t.status != 'WAITING_VERIFY'
        </if>
        <if test="rateStart != 0">
            <if test="rateEnd !=0">
                <![CDATA[ and (t.base_rate + t.activity_rate) >=  #{rateStart} ]]>
            </if>
            <if test="rateEnd ==0">
                <![CDATA[ and (t.base_rate + t.activity_rate) >  #{rateStart} ]]>
            </if>

        </if>
        <if test="rateEnd != 0">
            <![CDATA[ and (t.base_rate + t.activity_rate) <=  #{rateEnd} ]]>
        </if>

        ) temp
    </select>

    <select id="findByStatus" resultMap="loanResultMap">
        select * from loan where status = #{status}
    </select>

    <select useCache="false" id="findRepayingPaginationByAgentLoginName" parameterType="map" resultMap="loanResultMap">
        select *,
            (select min(loan_repay.repay_date)
             from loan_repay
             where loan.id=loan_repay.loan_id and loan_repay.status in ('REPAYING', 'WAIT_PAY', 'OVERDUE')) as next_repay_date,
            (select sum(loan_repay.corpus) + sum(loan_repay.expected_interest) + sum(loan_repay.default_interest)
             from loan_repay
             where loan.id=loan_repay.loan_id and loan_repay.status != 'COMPLETE' ) as unpaid_amount
        from loan
        where agent_login_name = #{agentLoginName} and status in ('REPAYING', 'WAIT_PAY', 'OVERDUE')
              and
              (
                  (select min(loan_repay.repay_date) from loan_repay where loan.id=loan_repay.loan_id and loan_repay.status in ('REPAYING', 'WAIT_PAY', 'OVERDUE')) between #{startTime} and #{endTime}
              or
                  (select min(loan_repay.repay_date) from loan_repay where loan.id=loan_repay.loan_id and loan_repay.status = 'COMPLETE') between #{startTime} and #{endTime}
              )
        order by next_repay_date asc, id asc
        limit #{index}, #{pageSize}
    </select>

    <select useCache="false" id="findCountRepayingByAgentLoginName" parameterType="map" resultType="long">
        select count(1) from loan
        where agent_login_name = #{agentLoginName} and status in ('REPAYING', 'OVERDUE')
              and
              (
                  (select min(loan_repay.repay_date) from loan_repay where loan.id=loan_repay.loan_id and loan_repay.status in ('REPAYING', 'WAIT_PAY', 'OVERDUE')) between #{startTime} and #{endTime}
              or
                  (select min(loan_repay.repay_date) from loan_repay where loan.id=loan_repay.loan_id and loan_repay.status = 'COMPLETE') between #{startTime} and #{endTime}
              )
    </select>

    <select useCache="false" id="findCompletedPaginationByAgentLoginName" parameterType="map" resultMap="loanResultMap">
        select *,
        (select max(loan_repay.actual_repay_date)
        from loan_repay
        where loan.id=loan_repay.loan_id) as completed_date,
        (select sum(loan_repay.corpus) + sum(loan_repay.expected_interest)
        from loan_repay
        where loan.id=loan_repay.loan_id) as expected_repay_amount,
        (select sum(loan_repay.corpus) + sum(loan_repay.actual_interest) + sum(loan_repay.default_interest)
        from loan_repay
        where loan.id=loan_repay.loan_id) as actual_repay_amount
        from loan
        where agent_login_name = #{agentLoginName} and status = 'COMPLETE'
        and (select max(loan_repay.actual_repay_date) from loan_repay where loan.id=loan_repay.loan_id) between #{startTime} and #{endTime}
        order by completed_date desc, id asc
        limit #{index}, #{pageSize}
    </select>

    <select useCache="false" id="findCountCompletedByAgentLoginName" parameterType="map" resultType="long">
        select count(1) from loan
        where agent_login_name = #{agentLoginName} and status = 'COMPLETE'
        and (select max(loan_repay.actual_repay_date) from loan_repay where loan.id=loan_repay.loan_id) between #{startTime} and #{endTime}
    </select>

    <select useCache="false" id="findCanceledPaginationByAgentLoginName" parameterType="map" resultMap="loanResultMap">
        select * from loan
        where agent_login_name = #{agentLoginName} and status = 'CANCEL' and recheck_time between #{startTime} and #{endTime}
        order by recheck_time desc, id asc
        limit #{index}, #{pageSize}
    </select>

    <select useCache="false" id="findCountCanceledByAgentLoginName" parameterType="map" resultType="long">
        select count(1) from loan
        where agent_login_name = #{agentLoginName} and status = 'CANCEL' and recheck_time between #{startTime} and #{endTime}
    </select>

    <update id="update" parameterType="com.tuotiansudai.repository.model.LoanModel">
        update loan
        <trim prefix="set" suffixOverrides=",">
            <if test="name !=null and name!=''">
                name = #{name},
            </if>
            <if test="agentLoginName !=null and agentLoginName!=''">
                agent_login_name = #{agentLoginName},
            </if>
            <if test="loanerLoginName !=null and loanerLoginName!=''">
                loaner_login_name = #{loanerLoginName},
            </if>
            <if test="loanerUserName !=null and loanerUserName!=''">
                loaner_user_name = #{loanerUserName},
            </if>
            <if test="loanerIdentityNumber !=null and loanerIdentityNumber!=''">
                loaner_identity_number= #{loanerIdentityNumber},
            </if>
            <if test="type !=null">
                type = #{type},
            </if>
            <if test="periods !=null and periods!=''">
                periods = #{periods},
                duration = #{duration},
            </if>
            <if test="pledgeType != null">
                pledge_type = #{pledgeType},
            </if>
            <if test="loanAmount !=null and loanAmount!=''">
                loan_amount = #{loanAmount},
            </if>
            <if test="minInvestAmount !=null and minInvestAmount!=''">
                min_invest_amount = #{minInvestAmount},
            </if>
            <if test="investIncreasingAmount !=null and investIncreasingAmount!=''">
                invest_increasing_amount = #{investIncreasingAmount},
            </if>
            <if test="maxInvestAmount !=null and maxInvestAmount!=''">
                max_invest_amount = #{maxInvestAmount},
            </if>
            <if test="activityType !=null">
                activity_type = #{activityType},
            </if>
            <if test="productType != null">
                product_type = #{productType},
            </if>
            <if test="activityRate !=null">
                activity_rate = #{activityRate},
            </if>
            <if test="baseRate != null and baseRate != ''">
                base_rate = #{baseRate},
            </if>
            <if test="contractId !=null and contractId!=''">
                contract_id = #{contractId},
            </if>
            <if test="fundraisingStartTime !=null">
                fundraising_start_time = #{fundraisingStartTime},
            </if>
            <if test="fundraisingEndTime !=null">
                fundraising_end_time = #{fundraisingEndTime},
            </if>
            <if test="raisingCompleteTime !=null">
                raising_complete_time = #{raisingCompleteTime},
            </if>
            <if test="showOnHome !=null">
                show_on_home = #{showOnHome},
            </if>
            <if test="verifyTime !=null">
                verify_time = #{verifyTime},
            </if>
            <if test="verifyLoginName != null">
                verify_login_name = #{verifyLoginName},
            </if>
            <if test="recheckTime !=null">
                recheck_time = #{recheckTime},
            </if>
            <if test="recheckLoginName != null">
                recheck_login_name = #{recheckLoginName},
            </if>
            <if test="status !=null">
                status = #{status},
            </if>
            <if test="firstInvestAchievementId !=null">
                first_invest_achievement_id = #{firstInvestAchievementId},
            </if>
            <if test="maxAmountAchievementId !=null">
                max_amount_achievement_id = #{maxAmountAchievementId},
            </if>
            <if test="lastInvestAchievementId !=null">
                last_invest_achievement_id = #{lastInvestAchievementId},
            </if>
            <if test="updateTime != null">
                update_time = #{updateTime}
            </if>

        </trim>
        where id = #{id}
    </update>

    <update id="updateWithoutStatus" parameterType="com.tuotiansudai.repository.model.LoanModel">
        update loan
        <trim prefix="set" suffixOverrides=",">
            <if test="name !=null and name!=''">
                name = #{name},
            </if>
            <if test="agentLoginName !=null and agentLoginName!=''">
                agent_login_name = #{agentLoginName},
            </if>
            <if test="loanerLoginName !=null and loanerLoginName!=''">
                loaner_login_name = #{loanerLoginName},
            </if>
            <if test="loanerUserName !=null and loanerUserName!=''">
                loaner_user_name = #{loanerUserName},
            </if>
            <if test="loanerIdentityNumber !=null and loanerIdentityNumber!=''">
                loaner_identity_number= #{loanerIdentityNumber},
            </if>
            <if test="type !=null">
                type = #{type},
            </if>
            <if test="periods !=null and periods!=''">
                periods = #{periods},
                duration = #{duration},
            </if>
            <if test="pledgeType != null">
                pledge_type = #{pledgeType},
            </if>
            <if test="loanAmount !=null and loanAmount!=''">
                loan_amount = #{loanAmount},
            </if>
            <if test="minInvestAmount !=null and minInvestAmount!=''">
                min_invest_amount = #{minInvestAmount},
            </if>
            <if test="investIncreasingAmount !=null and investIncreasingAmount!=''">
                invest_increasing_amount = #{investIncreasingAmount},
            </if>
            <if test="maxInvestAmount !=null and maxInvestAmount!=''">
                max_invest_amount = #{maxInvestAmount},
            </if>
            <if test="activityType !=null">
                activity_type = #{activityType},
            </if>
            <if test="productType != null">
                product_type = #{productType},
            </if>
            <if test="activityRate !=null">
                activity_rate = #{activityRate},
            </if>
            <if test="baseRate != null and baseRate != ''">
                base_rate = #{baseRate},
            </if>
            <if test="contractId !=null and contractId!=''">
                contract_id = #{contractId},
            </if>
            <if test="fundraisingStartTime !=null">
                fundraising_start_time = #{fundraisingStartTime},
            </if>
            <if test="fundraisingEndTime !=null">
                fundraising_end_time = #{fundraisingEndTime},
            </if>
            <if test="raisingCompleteTime !=null">
                raising_complete_time = #{raisingCompleteTime},
            </if>
            <if test="showOnHome !=null">
                show_on_home = #{showOnHome},
            </if>
            <if test="firstInvestAchievementId !=null">
                first_invest_achievement_id = #{firstInvestAchievementId},
            </if>
            <if test="maxAmountAchievementId !=null">
                max_amount_achievement_id = #{maxAmountAchievementId},
            </if>
            <if test="lastInvestAchievementId !=null">
                last_invest_achievement_id = #{lastInvestAchievementId},
            </if>
            <if test="updateTime != null">
                update_time = #{updateTime}
            </if>
        </trim>
        where id = #{id}
    </update>

    <update id="updateStatus" parameterType="map">
        update loan set status = #{status} where id = #{loanId}
    </update>

    <select id="findLoanList" parameterType="map" resultMap="loanResultMap">
        select * from loan t
        <where>
            <if test="status != null">
                t.status = #{status}
            </if>
            <if test="loanId != null">
                and t.id = #{loanId}
            </if>
            <if test="loanName != null and loanName != ''">
                and t.name like CONCAT(CONCAT('%', #{loanName}),'%')
            </if>
            <if test="startTime != null">
                and t.created_time >= #{startTime}
            </if>
            <if test="endTime != null">
                <![CDATA[ and t.created_time <= #{endTime} ]]>
            </if>
        </where>
        order by t.created_time desc
        <if test="currentPageNo >= 0">
            limit #{currentPageNo}, #{pageSize}
        </if>
    </select>

    <select id="findLoanListCount" parameterType="map" resultType="int">
        select count(*) from loan t
        <where>
            <if test="status != null">
                t.status = #{status}
            </if>
            <if test="loanId != null">
                and t.id = #{loanId}
            </if>
            <if test="loanName != null and loanName != ''">
                and t.name like CONCAT(CONCAT('%', #{loanName}),'%')
            </if>
            <if test="startTime != null">
                and t.created_time >= #{startTime}
            </if>
            <if test="endTime != null">
                <![CDATA[ and t.created_time <= #{endTime} ]]>
            </if>
        </where>
    </select>

    <update id="updateRaisingCompleteTime" parameterType="map">
        update loan set raising_complete_time = #{raisingCompleteTime} where id = #{loanId}
    </update>

    <select id="findHomeLoan" resultMap="loanResultMap">
            (select * from loan
            where <![CDATA[ loan.status <> 'WAITING_VERIFY' ]]>
        and loan.product_type = '_30' and loan.activity_type = 'NEWBIE' AND pledge_type != 'ENTERPRISE'
            order by case loan.status when 'RAISING' then '1' when 'PREHEAT' then '2' when 'RECHECK' then '3' when 'REPAYING' then '4' when 'COMPLETE' then '5' else '6' end,loan.verify_time desc, loan.created_time desc, loan.id desc
            limit 0, 1)
            UNION
            (select * from loan
            where <![CDATA[ loan.status <> 'WAITING_VERIFY' ]]>
        and loan.product_type = '_90' AND pledge_type != 'ENTERPRISE'
            order by case loan.status when 'RAISING' then '1' when 'PREHEAT' then '2' when 'RECHECK' then '3' when 'REPAYING' then '4' when 'COMPLETE' then '5' else '6' end, loan.verify_time desc,loan.created_time desc, loan.id desc
            limit 0, 1)
            UNION
            (select * from loan
            where <![CDATA[ loan.status <> 'WAITING_VERIFY' ]]>
        and loan.product_type = '_180' and loan.periods = 6 AND pledge_type != 'ENTERPRISE'
            order by case loan.status when 'RAISING' then '1' when 'PREHEAT' then '2' when 'RECHECK' then '3' when 'REPAYING' then '4' when 'COMPLETE' then '5' else '6' end, loan.verify_time desc,loan.created_time desc, loan.id desc
            limit 0, 1)
            UNION
            (select * from loan
            where <![CDATA[ loan.status <> 'WAITING_VERIFY' ]]>
        and loan.product_type = '_360' and loan.periods = 12 AND pledge_type != 'ENTERPRISE'
            order by case loan.status when 'RAISING' then '1' when 'PREHEAT' then '2' when 'RECHECK' then '3' when 'REPAYING' then '4' when 'COMPLETE' then '5' else '6' end, loan.verify_time desc,loan.created_time desc, loan.id desc
            limit 0, 1)
    </select>

    <select id="findHomeEnterpriseLoan" resultMap="loanResultMap">
        (select * from loan
        where <![CDATA[ loan.status <> 'WAITING_VERIFY' ]]>
        and loan.product_type = '_30' and loan.activity_type = 'NEWBIE' AND pledge_type = 'ENTERPRISE'
        order by case loan.status when 'RAISING' then '1' when 'PREHEAT' then '2' when 'RECHECK' then '3' when
        'REPAYING' then '4' when 'COMPLETE' then '5' else '6' end,loan.verify_time desc, loan.created_time desc, loan.id
        desc
        limit 0, 1)
        UNION
        (select * from loan
        where <![CDATA[ loan.status <> 'WAITING_VERIFY' ]]>
        and loan.product_type = '_90' AND pledge_type = 'ENTERPRISE'
        order by case loan.status when 'RAISING' then '1' when 'PREHEAT' then '2' when 'RECHECK' then '3' when
        'REPAYING' then '4' when 'COMPLETE' then '5' else '6' end, loan.verify_time desc,loan.created_time desc, loan.id
        desc
        limit 0, 1)
        UNION
        (select * from loan
        where <![CDATA[ loan.status <> 'WAITING_VERIFY' ]]>
        and loan.product_type = '_180' and loan.periods = 6 AND pledge_type = 'ENTERPRISE'
        order by case loan.status when 'RAISING' then '1' when 'PREHEAT' then '2' when 'RECHECK' then '3' when
        'REPAYING' then '4' when 'COMPLETE' then '5' else '6' end, loan.verify_time desc,loan.created_time desc, loan.id
        desc
        limit 0, 1)
        UNION
        (select * from loan
        where <![CDATA[ loan.status <> 'WAITING_VERIFY' ]]>
        and loan.product_type = '_360' and loan.periods = 12 AND pledge_type = 'ENTERPRISE'
        order by case loan.status when 'RAISING' then '1' when 'PREHEAT' then '2' when 'RECHECK' then '3' when
        'REPAYING' then '4' when 'COMPLETE' then '5' else '6' end, loan.verify_time desc,loan.created_time desc, loan.id
        desc
        limit 0, 1)
    </select>

    <select id="findHomeLoanByIsContainNewbie" resultMap="loanResultMap" parameterType="map">
        SELECT
        *
        FROM
        loan
        WHERE 1=1 and loan.product_type != 'EXPERIENCE'
        <if test="loanStatus.name() == 'RAISING'">
            and loan.status in ('RAISING','PREHEAT')
        </if>
        <if test="loanStatus.name() == 'COMPLETE'">
            and loan.status in ('RECHECK','REPAYING','OVERDUE','COMPLETE')
        </if>

        <if test="isShowNewbieLoan == false">
            and  <![CDATA[ loan.activity_type <> 'NEWBIE' ]]>
        </if>
        <if test="isShowNewbieLoan == true">
            and  <![CDATA[ loan.activity_type = 'NEWBIE' ]]>
        </if>
        <if test="productType != null">
            and loan.product_type = #{productType}
        </if>
        <if test="productType == null">
            and loan.product_type != 'EXPERIENCE'
        </if>
        ORDER BY CASE loan.status
        WHEN 'RAISING' THEN '1'
        WHEN 'PREHEAT' THEN '2' END,
        CASE WHEN loan.activity_type = 'NEWBIE' and loan.status in ('RAISING','PREHEAT') THEN '1' ELSE 2 END,
        CASE WHEN loan.status in ('RAISING','PREHEAT') THEN duration END,
        CASE WHEN loan.status in ('RAISING','PREHEAT','RECHECK') THEN verify_time END DESC,
        CASE WHEN loan.status in ('RAISING','PREHEAT','RECHECK') THEN created_time END DESC,
        CASE WHEN loan.status in ('RECHECK','REPAYING','OVERDUE','COMPLETE') THEN recheck_time END DESC
    </select>

    <select id="findLoanAchievement" resultMap="loanAchievementView" parameterType="map">
        SELECT
        *
        FROM
        (SELECT
        l.`id` as loan_id,
        l.`name`,
        l.`status` as loan_status,
        l.`periods`,
        l.`loan_amount`,
        l.`created_time`,
        l.`raising_complete_time`,
        l.`fundraising_start_time`,
        l.`first_invest_achievement_id`,
        l.last_invest_achievement_id,
        l.max_amount_achievement_id,
        (SELECT
        u.mobile
        FROM
        invest i join user u on i.login_name = u.login_name
        WHERE i.id = l.first_invest_achievement_id) AS first_invest_login_name,
        (SELECT
        i.amount
        FROM
        invest i
        WHERE i.id = l.first_invest_achievement_id) AS first_invest_amount,
        (SELECT
        u.mobile
        FROM
        invest i join user u on i.login_name = u.login_name
        WHERE i.id = l.last_invest_achievement_id) AS last_invest_login_name,
        (SELECT
        i.amount
        FROM
        invest i
        WHERE i.id = l.last_invest_achievement_id) AS last_invest_amount,
        (SELECT
        u.mobile
        FROM
        invest i join user u on i.login_name = u.login_name
        WHERE i.id = l.max_amount_achievement_id) AS max_amount_login_name,
        (SELECT
        i.amount
        FROM
        invest i
        WHERE i.id = l.max_amount_achievement_id) AS max_amount
        FROM
        loan l
        WHERE l.`status` IN (
        'RAISING',
        'RECHECK',
        'REPAYING',
        'COMPLETE'
        )) temp
        <if test="mobile != null and mobile != ''">
            WHERE temp.max_amount_login_name = #{mobile}
            OR temp.last_invest_login_name = #{mobile}
            OR temp.first_invest_login_name = #{mobile}
        </if>
        ORDER BY temp.created_time DESC
        limit #{index}, #{pageSize}
    </select>

    <select id="findLoanAchievementCount" parameterType="map" resultType="long">
        SELECT
        count(*)
        FROM
        (SELECT
        l.`id`,
        l.`name`,
        l.`status`,
        l.`periods`,
        l.`loan_amount`,
        l.`created_time`,
        l.`raising_complete_time`,
        l.`fundraising_start_time`,
        l.`first_invest_achievement_id`,
        l.last_invest_achievement_id,
        l.max_amount_achievement_id,
        (SELECT
        u.mobile
        FROM
        invest i join user u on i.login_name = u.login_name
        WHERE i.id = l.first_invest_achievement_id) AS first_invest_login_name,
        (SELECT
        i.amount
        FROM
        invest i
        WHERE i.id = l.first_invest_achievement_id) AS first_invest_amount,
        (SELECT
        u.mobile
        FROM
        invest i join user u on i.login_name = u.login_name
        WHERE i.id = l.last_invest_achievement_id) AS last_invest_login_name,
        (SELECT
        i.amount
        FROM
        invest i
        WHERE i.id = l.last_invest_achievement_id) AS last_invest_amount,
        (SELECT
        u.mobile
        FROM
        invest i join user u on i.login_name = u.login_name
        WHERE i.id = l.max_amount_achievement_id) AS max_amount_login_name,
        (SELECT
        i.amount
        FROM
        invest i
        WHERE i.id = l.max_amount_achievement_id) AS max_amount
        FROM
        loan l
        WHERE l.`status` IN (
        'RAISING',
        'RECHECK',
        'REPAYING',
        'COMPLETE'
        )) temp
        <if test="mobile != null and mobile != ''">
            WHERE temp.max_amount_login_name = #{mobile}
            OR temp.last_invest_login_name = #{mobile}
            OR temp.first_invest_login_name = #{mobile}
        </if>
    </select>

    <select id="findByProductType" resultMap="loanResultMap">
        select * from loan
        <where>
            <if test="productTypeList != null ">
                and loan.product_type IN
                <foreach collection="productTypeList" item="productType" open="(" separator="," close=")">
                    #{productType}
                </foreach>
            </if>
            <if test="loanStatus.name() == 'RAISING'">
                and loan.status in ('RAISING','PREHEAT')
            </if>
            <if test="loanStatus.name() == 'COMPLETE'">
                and loan.status in ('RECHECK','REPAYING','OVERDUE','COMPLETE')
            </if>
            <if test="activityType !=null ">
                and activity_type = #{activityType}
            </if>
        </where>
        ORDER BY CASE loan.status
        WHEN 'RAISING' THEN '1'
        WHEN 'PREHEAT' THEN '2' END,
        CASE WHEN loan.activity_type = 'NEWBIE' and loan.status in ('RAISING','PREHEAT') THEN '1' ELSE 2 END,
        CASE WHEN loan.status in ('RAISING','PREHEAT') THEN duration END,
        CASE WHEN loan.status in ('RAISING','PREHEAT','RECHECK') THEN verify_time END DESC,
        CASE WHEN loan.status in ('RAISING','PREHEAT','RECHECK') THEN created_time END DESC,
        CASE WHEN loan.status in ('REPAYING','OVERDUE','COMPLETE') THEN recheck_time END DESC
    </select>
</mapper>