<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.tuotiansudai.ask.repository.mapper.AnswerMapper">

    <cache eviction="LRU" type="com.tuotiansudai.cache.MybatisRedisCache"/>

    <resultMap id="answerResultMap" type="AnswerModel">
        <id column="id" property="id"/>
        <result column="login_name" property="loginName"/>
        <result column="mobile" property="mobile"/>
        <result column="fake_mobile" property="fakeMobile"/>
        <result column="question_id" property="questionId"/>
        <result column="answer" property="answer"/>
        <result column="best_answer" property="bestAnswer"/>
        <result column="adopted_time" property="adoptedTime"/>
        <result column="favored_by" property="favoredBy" typeHandler="com.tuotiansudai.ask.repository.mybatis.StringListTypeHandler"/>
        <result column="approved_by" property="approvedBy"/>
        <result column="approved_time" property="approvedTime"/>
        <result column="rejected_by" property="rejectedBy"/>
        <result column="rejected_time" property="rejectedTime"/>
        <result column="status" property="status"/>
        <result column="created_time" property="createdTime"/>
    </resultMap>

    <insert id="create" parameterType="AnswerModel" useGeneratedKeys="true" keyProperty="id">
        insert into answer (login_name, mobile, fake_mobile, question_id, answer, best_answer, adopted_time, favored_by, approved_by, approved_time, rejected_by, rejected_time, status, created_time)
        value(#{loginName}, #{mobile}, #{fakeMobile}, #{questionId}, #{answer}, #{bestAnswer}, #{adoptedTime}, #{favoredBy, typeHandler=com.tuotiansudai.ask.repository.mybatis.StringListTypeHandler}, #{approvedBy}, #{approvedTime}, #{rejectedBy}, #{rejectedTime}, #{status}, now())
    </insert>

    <update id="update" parameterType="AnswerModel">
        update answer set
        login_name = #{loginName},
        mobile = #{mobile},
        fake_mobile = #{fakeMobile},
        question_id = #{questionId},
        answer = #{answer},
        best_answer = #{bestAnswer},
        adopted_time = #{adoptedTime},
        favored_by = #{favoredBy, typeHandler=com.tuotiansudai.ask.repository.mybatis.StringListTypeHandler},
        approved_by = #{approvedBy},
        approved_time = #{approvedTime},
        rejected_by = #{rejectedBy},
        rejected_time = #{rejectedTime},
        status = #{status}
        where id = #{id}
    </update>

    <select id="findById" parameterType="long" resultMap="answerResultMap">
        select *
        from answer
        where id = #{id}
    </select>

    <select id="lockById" parameterType="long" resultMap="answerResultMap" useCache="false">
        select *
        from answer
        where id = #{id}
        for update
    </select>

    <select id="findByLoginName" parameterType="map" resultMap="answerResultMap">
        select *
        from answer
        where login_name = #{loginName}
        order by created_time desc
        <if test="index != null and pageSize != null ">
            limit #{index}, #{pageSize}
        </if>
    </select>

    <select id="countByLoginName" parameterType="string" resultType="long">
        select ifnull(count(1), 0)
        from answer
        where login_name = #{loginName}
    </select>

    <select id="findByQuestionId" parameterType="map" resultMap="answerResultMap">
        select *
        from answer
        where question_id = #{questionId}
        and (status not in ('UNAPPROVED', 'REJECTED') or login_name = #{loginName})
        order by created_time desc
    </select>

    <select id="countNotBestByQuestionId" parameterType="map" resultType="long">
        select ifnull(count(1), 0)
        from answer
        where question_id = #{questionId}
        and best_answer is FALSE
        and (status not in ('UNAPPROVED', 'REJECTED') or login_name = #{loginName})
    </select>

    <select id="findNotBestByQuestionId" parameterType="map" resultMap="answerResultMap">
        select *
        from answer
        where question_id = #{questionId}
        and best_answer is FALSE
        and (status not in ('UNAPPROVED', 'REJECTED') or login_name = #{loginName})
        order by created_time desc
        <if test="index != null and pageSize != null ">
            limit #{index}, #{pageSize}
        </if>
    </select>

    <select id="findBestAnswerByQuestionId" parameterType="long" resultMap="answerResultMap" useCache="false">
        select *
        from answer
        where question_id = #{questionId}
        and best_answer is TRUE
    </select>

    <select id="findAnswersForConsole" parameterType="map" resultMap="answerResultMap">
        select *
        from answer
        <where>
            <if test="question != null and question != '' ">
                and exists(select 1 from question where question.id = answer.question_id and question like CONCAT(CONCAT('%', #{question}), '%'))
            </if>
            <if test="mobile != null and mobile != ''">
                and mobile = #{mobile}
            </if>
            <if test="status != null">
                and status = #{status}
            </if>
        </where>
        order by created_time desc, id desc
        limit #{index}, #{pageSize}
    </select>

    <select id="countAnswersForConsole" parameterType="map" resultType="long">
        select ifnull(count(1), 0)
        from answer
        <where>
            <if test="question != null and question != '' ">
                and exists(select 1 from question where question.id = answer.question_id and question like CONCAT(CONCAT('%', #{question}), '%'))
            </if>
            <if test="mobile != null and mobile != ''">
                and mobile = #{mobile}
            </if>
            <if test="status != null">
                and status = #{status}
            </if>
        </where>
    </select>
</mapper>