input {
  file {
    path => "/var/log/job-worker/ttsd-user-mq-consumer.log"
    type => "worker"
    start_position => "beginning"
    #sincedb_path => "/dev/null"
    tags => "worker, ttsd-user-mq-consumer"
  }

  file {
    path => "/var/log/job-worker/ttsd-auditLog-mq-consumer.log"
    type => "worker"
    start_position => "beginning"
    #sincedb_path => "/dev/null"
    tags => "worker, ttsd-auditLog-mq-consumer"
  }

  file {
    path => "/var/log/job-worker/ttsd-activity-mq-consumer.log"
    type => "worker"
    start_position => "beginning"
    #sincedb_path => "/dev/null"
    tags => "worker, ttsd-activity-mq-consumer"
  }

  file {
    path => "/var/log/job-worker/ttsd-loan-mq-consumer.log"
    type => "worker"
    start_position => "beginning"
    #sincedb_path => "/dev/null"
    tags => "worker, ttsd-loan-mq-consumer"
  }

  file {
    path => "/var/log/job-worker/ttsd-message-mq-consumer.log"
    type => "worker"
    start_position => "beginning"
    #sincedb_path => "/dev/null"
    tags => "worker, ttsd-message-mq-consumer"
  }

  file {
    path => "/var/log/job-worker/ttsd-amount-mq-consumer.log"
    type => "worker"
    start_position => "beginning"
    #sincedb_path => "/dev/null"
    tags => "worker, ttsd-amount-mq-consumer"
  }

  file {
    path => "/var/log/job-worker/ttsd-point-mq-consumer.log"
    type => "worker"
    start_position => "beginning"
    #sincedb_path => "/dev/null"
    tags => "worker, point-mq-consumer"
  }

  file {
    path => "/var/log/job-worker/ttsd-sms-mq-consumer.log"
    type => "worker"
    start_position => "beginning"
    #sincedb_path => "/dev/null"
    tags => "worker, sms-mq-consumer"
  }

  file {
    path => "/var/log/job-worker/all-debug.log"
    type => "worker"
    start_position => "beginning"
    #sincedb_path => "/dev/null"
    tags => "worker, all"
  }
}

filter {
  multiline {
    pattern => "^\["
    negate => true
    what => "previous"
  }

  grok {
    patterns_dir => "/opt/logstash/grok_pattern"
    match => [ "message", "%{TOMCATLOG}" ]
    tag_on_failure => [ ]
  }

  date {
    match => [ "timestamp" , "yyyy-MM-dd HH:mm:ss.SSS" ]
  }
}

output {
  #stdout {codec => "rubydebug"}
  if "[ERROR" in [message] {
   #stdout {codec => "rubydebug"}
    http {
      url => "https://hook.bearychat.com/=bw9oS/incoming/29dfcf49bb5e46ce717fece83e8ef1b9"
      http_method => "post"
      format => "json"
      mapping => ["text", "HOST:%{host} ===> %{message}"]
    }
  }
  logservice {
    codec => "json"
    endpoint => "ttsd.cn-hangzhou-finance-intranet.log.aliyuncs.com"
    project => "ttsd"
    logstore => "worker_logs"
    source => ""
    access_key_id => "LTAIJhknVnhzYMGI"
    access_key_secret => "woLYouaicAL6jAtgk93A2FKdZ9Kp2m"
    max_send_retry => 10
  }
}
