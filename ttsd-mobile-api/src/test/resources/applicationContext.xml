<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-4.2.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd">


    <aop:aspectj-autoproxy expose-proxy="true"/>

    <!-- enable autowire -->
    <context:annotation-config/>

    <context:property-placeholder location="classpath*:ttsd-env.properties,classpath*:ttsd-biz.properties"/>

    <tx:annotation-driven transaction-manager="transactionManager"/>
    <aop:aspectj-autoproxy expose-proxy="true"/>

    <!-- enable component scanning (beware that this does not enable mapper scanning!) -->
    <context:component-scan
            base-package="com.tuotiansudai.service,com.tuotiansudai.repository,com.tuotiansudai.client,com.tuotiansudai.cache,
            com.tuotiansudai.spring,com.tuotiansudai.util,com.tuotiansudai.api,com.tuotiansudai.coupon,com.tuotiansudai.aspect,
            com.tuotiansudai.point,com.tuotiansudai.transfer,com.tuotiansudai.api.util,
            com.tuotiansudai.membership,com.tuotiansudai.message,com.tuotiansudai.anxin.service,com.tuotiansudai.cfca,
            com.tuotiansudai.contract.service,com.tuotiansudai.log.service"/>

    <bean id="hikariCPDataSource" class="com.zaxxer.hikari.HikariDataSource" destroy-method="close">
        <constructor-arg>
            <bean class="com.zaxxer.hikari.HikariConfig">
                <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
                <property name="jdbcUrl"
                          value="jdbc:mysql://${common.jdbc.host}:${common.jdbc.port}/aa?useUnicode=true&amp;characterEncoding=UTF-8"/>
                <property name="username" value="${common.jdbc.username}"/>
                <property name="password" value="${common.jdbc.password}"/>
                <property name="minimumIdle" value="1"/>
                <property name="maximumPoolSize" value="1"/>
                <property name="idleTimeout" value="${common.jdbc.idleTimeout}"/>
                <property name="dataSourceProperties">
                    <props>
                        <prop key="cachePrepStmts">${common.jdbc.cachePrepStmts}</prop>
                        <prop key="prepStmtCacheSize">${common.jdbc.prepStmtCacheSize}</prop>
                        <prop key="prepStmtCacheSqlLimit">${common.jdbc.prepStmtCacheSqlLimit}</prop>
                    </props>
                </property>
            </bean>
        </constructor-arg>
    </bean>

    <bean id="jobHikariCPDataSource" class="com.zaxxer.hikari.HikariDataSource" destroy-method="close">
        <constructor-arg>
            <bean class="com.zaxxer.hikari.HikariConfig">
                <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
                <property name="jdbcUrl"
                          value="jdbc:mysql://${common.jdbc.host}:${common.jdbc.port}/job_worker?useUnicode=true&amp;characterEncoding=UTF-8"/>
                <property name="username" value="${common.jdbc.username}"/>
                <property name="password" value="${common.jdbc.password}"/>
                <property name="minimumIdle" value="1"/>
                <property name="maximumPoolSize" value="1"/>
                <property name="idleTimeout" value="${common.jdbc.idleTimeout}"/>
                <property name="dataSourceProperties">
                    <props>
                        <prop key="cachePrepStmts">${common.jdbc.cachePrepStmts}</prop>
                        <prop key="prepStmtCacheSize">${common.jdbc.prepStmtCacheSize}</prop>
                        <prop key="prepStmtCacheSqlLimit">${common.jdbc.prepStmtCacheSqlLimit}</prop>
                    </props>
                </property>
            </bean>
        </constructor-arg>
    </bean>

    <bean id="activityHikariCPDataSource" class="com.zaxxer.hikari.HikariDataSource" destroy-method="close">
        <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
        <property name="jdbcUrl"
                  value="jdbc:mysql://${common.jdbc.host}:${common.jdbc.port}/edxactivity?useUnicode=true&amp;characterEncoding=UTF-8"/>
        <property name="username" value="${activity.jdbc.username}"/>
        <property name="password" value="${activity.jdbc.password}"/>
        <property name="minimumIdle" value="${mobile.activity.minimumIdle}"/>
        <property name="maximumPoolSize" value="${mobile.activity.maximumPoolSize}"/>
        <property name="idleTimeout" value="${common.jdbc.idleTimeout}"/>
        <property name="dataSourceProperties">
            <props>
                <prop key="cachePrepStmts">${common.jdbc.cachePrepStmts}</prop>
                <prop key="prepStmtCacheSize">${common.jdbc.prepStmtCacheSize}</prop>
                <prop key="prepStmtCacheSqlLimit">${common.jdbc.prepStmtCacheSqlLimit}</prop>
            </props>
        </property>
    </bean>

    <bean id="pointHikariCPDataSource" class="com.zaxxer.hikari.HikariDataSource" destroy-method="close">
        <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
        <property name="jdbcUrl"
                  value="jdbc:mysql://${common.jdbc.host}:${common.jdbc.port}/edxpoint?useUnicode=true&amp;characterEncoding=UTF-8"/>
        <property name="username" value="${point.jdbc.username}"/>
        <property name="password" value="${point.jdbc.password}"/>
        <property name="minimumIdle" value="1"/>
        <property name="maximumPoolSize" value="1"/>
        <property name="idleTimeout" value="${common.jdbc.idleTimeout}"/>
        <property name="dataSourceProperties">
            <props>
                <prop key="cachePrepStmts">${common.jdbc.cachePrepStmts}</prop>
                <prop key="prepStmtCacheSize">${common.jdbc.prepStmtCacheSize}</prop>
                <prop key="prepStmtCacheSqlLimit">${common.jdbc.prepStmtCacheSqlLimit}</prop>
            </props>
        </property>
    </bean>

    <bean id="anxinHikariCPDataSource" class="com.zaxxer.hikari.HikariDataSource" destroy-method="close">
        <constructor-arg>
            <bean class="com.zaxxer.hikari.HikariConfig">
                <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
                <property name="jdbcUrl" value="jdbc:mysql://${common.jdbc.host}:${common.jdbc.port}/${anxin.jdbc.schema}?useUnicode=true&amp;characterEncoding=UTF-8"/>
                <property name="username" value="${anxin.jdbc.username}"/>
                <property name="password" value="${anxin.jdbc.password}"/>
                <property name="minimumIdle" value="${web.aa.minimumIdle}"/>
                <property name="maximumPoolSize" value="${web.aa.maximumPoolSize}"/>
                <property name="idleTimeout" value="${common.jdbc.idleTimeout}"/>
                <property name="dataSourceProperties">
                    <props>
                        <prop key="cachePrepStmts">${common.jdbc.cachePrepStmts}</prop>
                        <prop key="prepStmtCacheSize">${common.jdbc.prepStmtCacheSize}</prop>
                        <prop key="prepStmtCacheSqlLimit">${common.jdbc.prepStmtCacheSqlLimit}</prop>
                    </props>
                </property>
            </bean>
        </constructor-arg>
    </bean>

    <bean id="messageHikariCPDataSource" class="com.zaxxer.hikari.HikariDataSource" destroy-method="close">
        <constructor-arg>
            <bean class="com.zaxxer.hikari.HikariConfig">
                <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
                <property name="jdbcUrl" value="jdbc:mysql://${common.jdbc.host}:${common.jdbc.port}/${message.jdbc.schema}?useUnicode=true&amp;characterEncoding=UTF-8"/>
                <property name="username" value="${message.jdbc.username}"/>
                <property name="password" value="${message.jdbc.password}"/>
                <property name="minimumIdle" value="${web.message.minimumIdle}"/>
                <property name="maximumPoolSize" value="${web.message.maximumPoolSize}"/>
                <property name="idleTimeout" value="${common.jdbc.idleTimeout}"/>
                <property name="dataSourceProperties">
                    <props>
                        <prop key="cachePrepStmts">${common.jdbc.cachePrepStmts}</prop>
                        <prop key="prepStmtCacheSize">${common.jdbc.prepStmtCacheSize}</prop>
                        <prop key="prepStmtCacheSqlLimit">${common.jdbc.prepStmtCacheSqlLimit}</prop>
                    </props>
                </property>
            </bean>
        </constructor-arg>
    </bean>

    <!-- transaction manager, use JtaTransactionManager for global tx -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="hikariCPDataSource"/>
    </bean>

    <bean id="activityTransactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="activityHikariCPDataSource"/>
    </bean>

    <bean id="pointTransactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="pointHikariCPDataSource"/>
    </bean>

    <bean id="anxinTransactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="anxinHikariCPDataSource"/>
    </bean>

    <bean id="messageTransactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="messageHikariCPDataSource"/>
    </bean>

    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="hikariCPDataSource"/>
        <property name="typeAliasesPackage"
                  value="com.tuotiansudai.repository.model,com.tuotiansudai.membership.repository.model"/>
    </bean>

    <bean id="pointSqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="pointHikariCPDataSource"/>
        <property name="typeAliasesPackage"
                  value="com.tuotiansudai.point.repository.model"/>
    </bean>

    <bean id="activitySqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="activityHikariCPDataSource"/>
        <property name="typeAliasesPackage" value="com.tuotiansudai.activity.repository.model"/>
    </bean>

    <bean id="anxinSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="anxinHikariCPDataSource"/>
        <property name="typeAliasesPackage" value="com.tuotiansudai.cfca.model"/>
    </bean>

    <bean id="messageSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="messageHikariCPDataSource"/>
        <property name="typeAliasesPackage" value="com.tuotiansudai.message.repository.model"/>
    </bean>

    <bean id="jobStoreBuilder" class="com.tuotiansudai.quartz.JobStoreBuilder">
        <constructor-arg ref="jobHikariCPDataSource"/>
    </bean>

    <bean id="schedulerBuilder" class="com.tuotiansudai.quartz.SchedulerBuilder">
        <constructor-arg ref="jobStoreBuilder"/>
    </bean>

    <bean id="jobManager" class="com.tuotiansudai.job.JobManager">
        <constructor-arg ref="schedulerBuilder"/>
    </bean>

    <!-- scan for mappers and let them be autowired -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <property name="basePackage"
                  value="com.tuotiansudai.repository.mapper,com.tuotiansudai.membership.repository.mapper"/>
    </bean>

    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="sqlSessionFactoryBeanName" value="pointSqlSessionFactory"/>
        <property name="basePackage"
                  value="com.tuotiansudai.point.repository.mapper"/>
    </bean>

    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="sqlSessionFactoryBeanName" value="activitySqlSessionFactory"/>
        <property name="basePackage" value="com.tuotiansudai.activity.repository.mapper"/>
    </bean>

    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="sqlSessionFactoryBeanName" value="anxinSessionFactory"/>
        <property name="basePackage" value="com.tuotiansudai.cfca.mapper"/>
    </bean>

    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="sqlSessionFactoryBeanName" value="messageSessionFactory"/>
        <property name="basePackage" value="com.tuotiansudai.message.repository.mapper"/>
    </bean>

    <bean id="okHttpClient" class="com.squareup.okhttp.OkHttpClient"/>
    <!--for test-->
    <bean id="httpServletRequest" class="org.springframework.mock.web.MockHttpServletRequest"/>

    <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <property name="maxTotal" value="300"/>
    </bean>

    <bean class="com.tuotiansudai.mq.config.MQProducerConfig"/>
</beans>