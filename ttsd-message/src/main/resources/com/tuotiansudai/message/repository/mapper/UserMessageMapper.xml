<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.tuotiansudai.message.repository.mapper.UserMessageMapper">

    <cache eviction="LRU" type="com.tuotiansudai.cache.MybatisRedisCache"/>

    <resultMap id="userMessageResultMap" type="UserMessageModel">
        <id column="id" property="id"/>
        <result column="message_id" property="messageId"/>
        <result column="login_name" property="loginName"/>
        <result column="title" property="title"/>
        <result column="app_title" property="appTitle"/>
        <result column="content" property="content"/>
        <result column="read" property="read"/>
        <result column="read_time" property="readTime"/>
        <result column="created_time" property="createdTime"/>
    </resultMap>

    <select id="findById" parameterType="long" resultMap="userMessageResultMap">
        select * from user_message where id = #{id};
    </select>

    <select id="findByLoginName" parameterType="string" resultMap="userMessageResultMap">
        select * from user_message where login_name = #{loginName};
    </select>

    <insert id="create" parameterType="UserMessageModel" useGeneratedKeys="true" keyProperty="id">
        insert into user_message (`message_id`, `login_name`, `title`, `app_title`, `content`, `read`, `read_time`, `created_time`)
        value(#{messageId}, #{loginName}, #{title}, #{appTitle}, #{content}, #{read}, #{readTime}, #{createdTime})
    </insert>

    <update id="update" parameterType="UserMessageModel">
        update user_message
        set `message_id` = #{messageId},
            `login_name` = #{loginName},
            `title` = #{title},
            `app_title` = #{appTitle},
            `content` = #{content},
            `read` = #{read},
            `read_time` = #{readTime},
            `created_time` = #{createdTime}
        where `id` = #{id}
    </update>

    <select id="findMessagesByLoginName" parameterType="map" resultMap="userMessageResultMap">
        select u.* from user_message u
        inner join message m on u.message_id = m.id
        where login_name = #{loginName}
        <if test="channels != null">
            and find_in_set(#{channels},m.channels)
        </if>
        <if test="channels != null and channels.name() == 'APP_MESSAGE'">
            and u.app_title is not null
        </if>
        order by created_time desc
        <if test="index != null and pageSize != null">
            limit #{index}, #{pageSize}
        </if>
    </select>

    <select id="countMessagesByLoginName" parameterType="string" resultType="long">
        select count(u.id) from user_message u
        inner join message m on u.message_id = m.id
        where login_name = #{loginName}
        <if test="channels != null">
            and find_in_set(#{channels},m.channels)
        </if>
    </select>

    <select id="countUnreadMessagesByLoginName" parameterType="string" resultType="long">
        select count(u.id) from user_message u
        inner join message m on u.message_id = m.id
        where login_name = #{loginName}
        <if test="channels != null">
            and find_in_set(#{channels},m.channels)
        </if>
        <if test="channels != null and channels = 'APP_MESSAGE'">
            and u.app_title is not null
        </if>
        and `read` = FALSE
    </select>

</mapper>