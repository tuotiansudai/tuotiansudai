<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.tuotiansudai.console.bi.repository.mapper.BusinessIntelligenceMapper">

    <resultMap id="keyValueMap" type="KeyValueModel">
        <result column="name" property="name"></result>
        <result column="value" property="value"></result>
        <result column="group" property="group"></result>
    </resultMap>

    <select id="queryUserRegisterTrend" parameterType="map" resultMap="keyValueMap">
        select
        <if test="granularity.name() == 'Hourly'">
            HOUR (u.register_time) AS `name`,
        </if>
        <if test="granularity.name() == 'Daily'">
            DATE(u.register_time) AS `name`,
        </if>
        <if test="granularity.name() == 'Weekly'">
            DATE_FORMAT(u.register_time, '%Y-W%u') AS `name`,
        </if>
        <if test="granularity.name() == 'Monthly'">
            DATE_FORMAT(u.register_time, '%Y-%m') AS `name`,
        </if>
          count(*) as `value`,
          u.province as `group`
          from
        <if test="roleStage.name() == 'ALL' ">
              user u
        </if>
        <if test="roleStage.name() == 'STAFF' ">
            (SELECT
              j.*
             FROM
              user j
              JOIN
              (SELECT
                  h.login_name
                FROM
                  user_role h
                WHERE h.role = 'STAFF') gg
              ON j.`login_name` = gg.login_name) u
        </if>
        <if test="roleStage.name() == 'RECOMMENDATION' ">
            (SELECT
              j.*
              FROM
                user j
                JOIN
                (SELECT
                  k.`login_name`
                  FROM
                    user_role o
                  RIGHT JOIN referrer_relation k
                    ON o.`login_name` = k.`referrer_login_name`
                    AND k.`level` = 1
                  WHERE o.`role` = 'STAFF') gg
                ON j.`login_name` = gg.login_name) u
        </if>
        <if test="roleStage.name() == 'AGENT' ">
            (SELECT
              j.*
            FROM
              user j
              JOIN
              (SELECT
                o.`login_name`
              FROM
                user_role o
              WHERE o.`role` = 'AGENT'
              GROUP BY o.`login_name`) oo
            ON j.`login_name` = oo.login_name) u
        </if>
        <if test="roleStage.name() == 'NORMAL_USER' ">
            (SELECT
            j.*
            FROM
            user j
            WHERE NOT EXISTS
            (SELECT
            1
            FROM
            (SELECT
            *
            FROM
            (SELECT
            k.`login_name`
            FROM
            user_role o
            RIGHT JOIN referrer_relation k
            ON o.`login_name` = k.`referrer_login_name`
            AND k.`level` = 1
            WHERE o.`role` = 'STAFF'
            UNION
            SELECT
            h.login_name
            FROM
            user_role h
            WHERE h.role IN ('STAFF', 'AGENT')) ff) gg
            WHERE gg.login_name = j.`login_name`) and  EXISTS(select 1 from invest i where j.login_name = i.login_name)) u
        </if>
        <if test="roleStage.name() == 'OTHERS' ">
            (SELECT
            j.*
            FROM
            user j
            WHERE NOT EXISTS
            (SELECT
            1
            FROM
            (SELECT
            *
            FROM
            (SELECT
            k.`login_name`
            FROM
            user_role o
            RIGHT JOIN referrer_relation k
            ON o.`login_name` = k.`referrer_login_name`
            AND k.`level` = 1
            WHERE o.`role` = 'STAFF'
            UNION
            SELECT
            h.login_name
            FROM
            user_role h
            WHERE h.role IN ('STAFF', 'AGENT')) ff) gg
            WHERE gg.login_name = j.`login_name`)) u
        </if>

        <choose>
            <when test="province != null and province!= ''">
                where u.province = #{province}
            </when>
            <otherwise>
                where exists (
                    select province from (
                        select province from (
                            select count(*) as v, a.province from user a
                            where a.register_time between #{startTime} and #{endTime}
                            <if test="userStage.name() == 'BindCard'">
                                and exists (select * from bank_card b where  a.login_name = b.login_name and b.status='PASSED')
                            </if>
                            <if test="userStage.name() == 'Certification'">
                                and exists (select * from account ac where  a.login_name = ac.login_name)
                            </if>
                            group by province
                        ) t order by v desc limit 5
                    ) p where p.province = u.province
                )
            </otherwise>
        </choose>
        and u.register_time between #{startTime} and #{endTime}
        <if test="channel !=null and channel != '' and channel != '其他' ">
            and u.channel = #{channel}
        </if>
        <if test="channel == '其他'" >
            and u.channel IS NULL
        </if>
        <if test="userStage.name() == 'BindCard'">
          and exists (select * from bank_card b where  u.login_name = b.login_name and b.status='PASSED')
        </if>
        <if test="userStage.name() == 'Certification'">
          and exists (select * from account ac where  u.login_name = ac.login_name)
        </if>
        group by u.province,
        <if test="granularity.name() == 'Hourly'">
            HOUR (u.register_time)
        </if>
        <if test="granularity.name() == 'Daily'">
          date(u.register_time)
        </if>
        <if test="granularity.name() == 'Weekly'">
          year(u.register_time), week(u.register_time)
        </if>
        <if test="granularity.name() == 'Monthly'">
          year(u.register_time), month(u.register_time)
        </if>
        <if test="province == null or province ==''">
            union all
            select
            <if test="granularity.name() == 'Hourly'">
                HOUR (u.register_time) AS `name`,
            </if>
            <if test="granularity.name() == 'Daily'">
                DATE(u.register_time) AS `name`,
            </if>
            <if test="granularity.name() == 'Weekly'">
                DATE_FORMAT(u.register_time, '%Y-W%u') AS `name`,
            </if>
            <if test="granularity.name() == 'Monthly'">
                DATE_FORMAT(u.register_time, '%Y-%m') AS `name`,
            </if>
              count(*) as `value`,
              '其它' as `group`
            from
            <if test="roleStage.name() == 'ALL' ">
                user u
            </if>
            <if test="roleStage.name() == 'STAFF' ">
                (SELECT
                  j.*
                  FROM
                  user j
                  JOIN
                  (SELECT
                    h.login_name
                  FROM
                    user_role h
                  WHERE h.role = 'STAFF') gg
                  ON j.`login_name` = gg.login_name) u
            </if>
            <if test="roleStage.name() == 'RECOMMENDATION' ">
                (SELECT
                  j.*
                FROM
                user j
                JOIN
                (SELECT
                  k.`login_name`
                FROM
                  user_role o
                RIGHT JOIN referrer_relation k
                  ON o.`login_name` = k.`referrer_login_name`
                  AND k.`level` = 1
                WHERE o.`role` = 'STAFF') gg
                ON j.`login_name` = gg.login_name) u
            </if>
            <if test="roleStage.name() == 'AGENT' ">
                (SELECT
                  j.*
                FROM
                  user j
                JOIN
                  (SELECT
                    o.`login_name`
                  FROM
                    user_role o
                  WHERE o.`role` = 'AGENT'
                  GROUP BY o.`login_name`) oo
                ON j.`login_name` = oo.login_name) u
            </if>
            <if test="roleStage.name() == 'NORMAL_USER' ">
                (SELECT
                j.*
                FROM
                user j
                WHERE NOT EXISTS
                (SELECT
                1
                FROM
                (SELECT
                *
                FROM
                (SELECT
                k.`login_name`
                FROM
                user_role o
                RIGHT JOIN referrer_relation k
                ON o.`login_name` = k.`referrer_login_name`
                AND k.`level` = 1
                WHERE o.`role` = 'STAFF'
                UNION
                SELECT
                h.login_name
                FROM
                user_role h
                WHERE h.role IN ('STAFF', 'AGENT')) ff) gg
                WHERE gg.login_name = j.`login_name`) and  EXISTS(select 1 from invest i where j.login_name = i.login_name)) u
            </if>
            <if test="roleStage.name() == 'OTHERS' ">
                (SELECT
                j.*
                FROM
                user j
                WHERE NOT EXISTS
                (SELECT
                1
                FROM
                (SELECT
                *
                FROM
                (SELECT
                k.`login_name`
                FROM
                user_role o
                RIGHT JOIN referrer_relation k
                ON o.`login_name` = k.`referrer_login_name`
                AND k.`level` = 1
                WHERE o.`role` = 'STAFF'
                UNION
                SELECT
                h.login_name
                FROM
                user_role h
                WHERE h.role IN ('STAFF', 'AGENT')) ff) gg
                WHERE gg.login_name = j.`login_name`)) u
            </if>
            where not exists (
                select province from (
                    select province from (
                        select count(*) as v, a.province from user a
                        where a.register_time between #{startTime} and #{endTime}
                        <if test="userStage.name() == 'BindCard'">
                            and exists (select * from bank_card b where  a.login_name = b.login_name and b.status='PASSED')
                        </if>
                        <if test="userStage.name() == 'Certification'">
                            and exists (select * from account ac where  a.login_name = ac.login_name)
                        </if>
                        group by province
                    ) t order by v desc limit 5
                ) p where p.province = u.province
            )
            and u.register_time between #{startTime} and #{endTime}
            <if test="channel !=null and channel != '' and channel != '其他' ">
                and u.channel = #{channel}
            </if>
            <if test="channel == '其他'" >
                and u.channel IS NULL
            </if>
            <if test="userStage.name() == 'BindCard'">
                and exists (select * from bank_card b where  u.login_name = b.login_name and b.status='PASSED')
            </if>
            <if test="userStage.name() == 'Certification'">
                and exists (select * from account ac where  u.login_name = ac.login_name)
            </if>
            group by
            <if test="granularity.name() == 'Hourly'">
                HOUR (u.register_time)
            </if>
            <if test="granularity.name() == 'Daily'">
                date(u.register_time)
            </if>
            <if test="granularity.name() == 'Weekly'">
                year(u.register_time), week(u.register_time)
            </if>
            <if test="granularity.name() == 'Monthly'">
                year(u.register_time), month(u.register_time)
            </if>
        </if>
    </select>

    <select id="queryUserRechargeTrend" parameterType="map" resultMap="keyValueMap">
        SELECT
        <if test="granularity.name() == 'Hourly'">
            HOUR (re.created_time) AS `name`,
        </if>
        <if test="granularity.name() == 'Daily'">
            DATE(re.`created_time`) AS `name`,
        </if>
        <if test="granularity.name() == 'Weekly'">
            DATE_FORMAT(re.`created_time`, '%Y-W%u') AS `name`,
        </if>
        <if test="granularity.name() == 'Monthly'">
            DATE_FORMAT(re.`created_time`, '%Y-%m') AS `name`,
        </if>
        ROUND(SUM(re.amount / 100), 2) AS `value`,
        us.province AS `group`
        FROM
        `user` us
        JOIN `account` ac
        ON us.login_name = ac.login_name
        JOIN `recharge` re
        ON us.login_name = re.login_name
        AND re.status = 'SUCCESS'
        AND re.created_time BETWEEN #{startTime} AND #{endTime}
        JOIN
        (SELECT
        ure.`login_name`
        FROM
        `user` ure
        JOIN account acc
        ON ure.`login_name` = acc.`login_name`
        WHERE NOT EXISTS
        (SELECT
        1
        FROM
        `user_role` ur
        WHERE ur.role = 'LOANER'
        AND ure.`login_name` = ur.`login_name`)) temp1
        ON us.login_name = temp1.login_name
        <choose>
        <when test="province != null and province!= ''">
        WHERE us.`province` = #{province}
        </when>
        <otherwise>
        JOIN
        (SELECT
        u.province
        FROM
        `user` u
        JOIN `account` a
        ON u.login_name = a.login_name
        JOIN `recharge` r
        ON u.login_name = r.login_name
        AND r.status = 'SUCCESS'
        AND r.created_time BETWEEN #{startTime} AND #{endTime}
        JOIN
        (SELECT
        ure.`login_name`
        FROM
        `user` ure
        JOIN account acc
        ON ure.`login_name` = acc.`login_name`
        WHERE NOT EXISTS
        (SELECT
        1
        FROM
        `user_role` ur
        WHERE ur.role = 'LOANER'
        AND ure.`login_name` = ur.`login_name`)) temp
        ON u.login_name = temp.login_name
        GROUP BY u.province
        ORDER BY ROUND(SUM(r.amount), 2) DESC
        LIMIT 5) pr
        ON us.province = pr.province
        </otherwise>
        </choose>
        GROUP BY us.province,
        <if test="granularity.name() == 'Hourly'">
            HOUR (re.created_time)
        </if>
        <if test="granularity.name() == 'Daily'">
            DATE(re.`created_time`)
        </if>
        <if test="granularity.name() == 'Weekly'">
            DATE_FORMAT(re.`created_time`, '%Y-W%u')
        </if>
        <if test="granularity.name() == 'Monthly'">
            DATE_FORMAT(re.`created_time`, '%Y-%m')
        </if>
        <if test="province == null or province ==''">
        UNION
        ALL
        SELECT
        <if test="granularity.name() == 'Hourly'">
            HOUR (re.created_time) AS `name`,
        </if>
        <if test="granularity.name() == 'Daily'">
            DATE(re.`created_time`) AS `name`,
        </if>
        <if test="granularity.name() == 'Weekly'">
            DATE_FORMAT(re.`created_time`, '%Y-W%u') AS `name`,
        </if>
        <if test="granularity.name() == 'Monthly'">
            DATE_FORMAT(re.`created_time`, '%Y-%m') AS `name`,
        </if>
        ROUND(SUM(re.amount / 100), 2) AS `value`,
        '其他' AS `group`
        FROM
        `user` us
        JOIN `account` ac
        ON us.login_name = ac.login_name
        JOIN `recharge` re
        ON us.login_name = re.login_name
        AND re.status = 'SUCCESS'
        AND re.created_time BETWEEN #{startTime} AND #{endTime}
        JOIN
        (SELECT
        ure.`login_name`
        FROM
        `user` ure
        JOIN account acc
        ON ure.`login_name` = acc.`login_name`
        WHERE NOT EXISTS
        (SELECT
        1
        FROM
        `user_role` ur
        WHERE ur.role = 'LOANER'
        AND ure.`login_name` = ur.`login_name`)) temp1
        ON us.login_name = temp1.login_name
        WHERE NOT EXISTS
        (SELECT
        1
        FROM
        (SELECT
        u.province
        FROM
        `user` u
        JOIN `account` a
        ON u.login_name = a.login_name
        JOIN `recharge` r
        ON u.login_name = r.login_name
        AND r.status = 'SUCCESS'
        AND r.created_time BETWEEN #{startTime} AND #{endTime}
        JOIN
        (SELECT
        ure.`login_name`
        FROM
        `user` ure
        JOIN account acc
        ON ure.`login_name` = acc.`login_name`
        WHERE NOT EXISTS
        (SELECT
        1
        FROM
        `user_role` ur
        WHERE ur.role = 'LOANER'
        AND ure.`login_name` = ur.`login_name`)) temp
        ON u.login_name = temp.login_name
        GROUP BY u.province
        ORDER BY ROUND(SUM(r.amount), 2) DESC
        LIMIT 5) temp_p
        WHERE us.`province` = temp_p.province)
        GROUP BY
        <if test="granularity.name() == 'Hourly'">
            HOUR (re.created_time)
        </if>
        <if test="granularity.name() == 'Daily'">
            DATE(re.`created_time`)
        </if>
        <if test="granularity.name() == 'Weekly'">
            DATE_FORMAT(re.`created_time`, '%Y-W%u')
        </if>
        <if test="granularity.name() == 'Monthly'">
            DATE_FORMAT(re.`created_time`, '%Y-%m')
        </if>
        </if>
    </select>

    <select id="queryUserWithdrawTrend" parameterType="map" resultMap="keyValueMap">
        SELECT
        <if test="granularity.name() == 'Hourly'">
            HOUR (re.created_time) AS `name`,
        </if>
        <if test="granularity.name() == 'Daily'">
            DATE(re.`created_time`) AS `name`,
        </if>
        <if test="granularity.name() == 'Weekly'">
            DATE_FORMAT(re.`created_time`, '%Y-W%u') AS `name`,
        </if>
        <if test="granularity.name() == 'Monthly'">
            DATE_FORMAT(re.`created_time`, '%Y-%m') AS `name`,
        </if>
        ROUND(SUM(re.amount / 100), 2) AS `value`,
        us.province AS `group`
        FROM
        `user` us
        JOIN `account` ac
        ON us.login_name = ac.login_name
        JOIN `withdraw` re
        ON us.login_name = re.login_name
        AND re.status = 'SUCCESS'
        AND re.created_time BETWEEN #{startTime} AND #{endTime}
        JOIN
        (SELECT
        ure.`login_name`
        FROM
        `user` ure
        JOIN account acc
        ON ure.`login_name` = acc.`login_name`
        WHERE NOT EXISTS
        (SELECT
        1
        FROM
        `user_role` ur
        WHERE ur.role = 'LOANER'
        AND ure.`login_name` = ur.`login_name`)) temp1
        ON us.login_name = temp1.login_name
        <choose>
            <when test="province != null and province!= ''">
                WHERE us.`province` = #{province}
            </when>
            <otherwise>
                JOIN
                (SELECT
                u.province
                FROM
                `user` u
                JOIN `account` a
                ON u.login_name = a.login_name
                JOIN `withdraw` r
                ON u.login_name = r.login_name
                AND r.status = 'SUCCESS'
                AND r.created_time BETWEEN #{startTime} AND #{endTime}
                JOIN
                (SELECT
                ure.`login_name`
                FROM
                `user` ure
                JOIN account acc
                ON ure.`login_name` = acc.`login_name`
                WHERE NOT EXISTS
                (SELECT
                1
                FROM
                `user_role` ur
                WHERE ur.role = 'LOANER'
                AND ure.`login_name` = ur.`login_name`)) temp
                ON u.login_name = temp.login_name
                GROUP BY u.province
                ORDER BY ROUND(SUM(r.amount), 2) DESC
                LIMIT 5) pr
                ON us.province = pr.province
            </otherwise>
        </choose>
        GROUP BY us.province,
        <if test="granularity.name() == 'Hourly'">
            HOUR (re.created_time)
        </if>
        <if test="granularity.name() == 'Daily'">
            DATE(re.`created_time`)
        </if>
        <if test="granularity.name() == 'Weekly'">
            DATE_FORMAT(re.`created_time`, '%Y-W%u')
        </if>
        <if test="granularity.name() == 'Monthly'">
            DATE_FORMAT(re.`created_time`, '%Y-%m')
        </if>
        <if test="province == null or province ==''">
            UNION
            ALL
            SELECT
            <if test="granularity.name() == 'Hourly'">
                HOUR (re.created_time) AS `name`,
            </if>
            <if test="granularity.name() == 'Daily'">
                DATE(re.`created_time`) AS `name`,
            </if>
            <if test="granularity.name() == 'Weekly'">
                DATE_FORMAT(re.`created_time`, '%Y-W%u') AS `name`,
            </if>
            <if test="granularity.name() == 'Monthly'">
                DATE_FORMAT(re.`created_time`, '%Y-%m') AS `name`,
            </if>
            ROUND(SUM(re.amount / 100), 2) AS `value`,
            '其他' AS `group`
            FROM
            `user` us
            JOIN `account` ac
            ON us.login_name = ac.login_name
            JOIN `withdraw` re
            ON us.login_name = re.login_name
            AND re.status = 'SUCCESS'
            AND re.created_time BETWEEN #{startTime} AND #{endTime}
            JOIN
            (SELECT
            ure.`login_name`
            FROM
            `user` ure
            JOIN account acc
            ON ure.`login_name` = acc.`login_name`
            WHERE NOT EXISTS
            (SELECT
            1
            FROM
            `user_role` ur
            WHERE ur.role = 'LOANER'
            AND ure.`login_name` = ur.`login_name`)) temp1
            ON us.login_name = temp1.login_name
            WHERE NOT EXISTS
            (SELECT
            1
            FROM
            (SELECT
            u.province
            FROM
            `user` u
            JOIN `account` a
            ON u.login_name = a.login_name
            JOIN `withdraw` r
            ON u.login_name = r.login_name
            AND r.status = 'SUCCESS'
            AND r.created_time BETWEEN #{startTime} AND #{endTime}
            JOIN
            (SELECT
            ure.`login_name`
            FROM
            `user` ure
            JOIN account acc
            ON ure.`login_name` = acc.`login_name`
            WHERE NOT EXISTS
            (SELECT
            1
            FROM
            `user_role` ur
            WHERE ur.role = 'LOANER'
            AND ure.`login_name` = ur.`login_name`)) temp
            ON u.login_name = temp.login_name
            GROUP BY u.province
            ORDER BY ROUND(SUM(r.amount), 2) DESC
            LIMIT 5) temp_p
            WHERE us.`province` = temp_p.province)
            GROUP BY
            <if test="granularity.name() == 'Hourly'">
                HOUR (re.created_time)
            </if>
            <if test="granularity.name() == 'Daily'">
                DATE(re.`created_time`)
            </if>
            <if test="granularity.name() == 'Weekly'">
                DATE_FORMAT(re.`created_time`, '%Y-W%u')
            </if>
            <if test="granularity.name() == 'Monthly'">
                DATE_FORMAT(re.`created_time`, '%Y-%m')
            </if>
        </if>
    </select>

    <select id="queryInvestViscosity" parameterType="map" resultMap="keyValueMap">
        select
          a.loan_count as `name`,
          count(*) as `value`,
          '续投用户' as `group`
        from (
          select
            count(distinct i.loan_id) as loan_count
          from invest i
          <if test="province != null and province !=''">
          inner join `user` u
          on i.login_name = u.login_name
          </if>
          where
            i.status='SUCCESS'
            and i.created_time between #{startTime} and #{endTime}
            <if test="province != null and province !=''">
            and u.province = #{province}
            </if>
          group by i.login_name
        ) a
        group by a.loan_count;
    </select>


    <resultMap id="investViscosityDetailView" type="InvestViscosityDetailView">
        <result column="login_name" property="loginName"></result>
        <result column="user_name" property="userName"></result>
        <result column="mobile" property="mobile"></result>
        <result column="is_staff" property="isStaff"></result>
        <result column="referrer" property="referrer"></result>
        <result column="referrer_user_name" property="referrerUserName"></result>
        <result column="is_referrer_staff" property="isReferrerStaff"></result>
        <result column="total_amount" property="totalAmount"></result>
        <result column="last_invest_time" property="lastInvestTime"></result>
        <result column="loan_count" property="loanCount"></result>
    </resultMap>

    <select id="queryInvestViscosityDetail" parameterType="map" resultMap="investViscosityDetailView">
        select
            temp.login_name,
            a.user_name,
            u.mobile,
            IFNULL((select 1 from user_role ur where ur.login_name = temp.login_name and ur.role='STAFF'),0) as is_staff,
            u.referrer,
            ra.user_name as referrer_user_name,
            IFNULL((select 1 from user_role ur where ur.login_name = u.referrer and ur.role='STAFF'),0) as is_referrer_staff,
            temp.total_amount,
            temp.last_invest_time,
            temp.loan_count
        from (
            select
                i.login_name,
                IFNULL(SUM(i.amount),0) as total_amount,
                MAX(i.created_time) as last_invest_time,
                count(distinct i.loan_id) as loan_count
            from invest i
            <if test="province != null and province !=''">
                inner join `user` uu
                    on i.login_name = uu.login_name
            </if>
            where
                i.status='SUCCESS'
                AND i.created_time between #{startTime} and #{endTime}
                <if test="province != null and province !=''">
                    and uu.province = #{province}
                </if>
            group by i.login_name
        ) temp
        LEFT JOIN `user` u on temp.login_name = u.login_name
        LEFT JOIN `account` a on temp.login_name = a.login_name
        LEFT JOIN account ra on u.referrer = ra.login_name
        WHERE
        <if test="loanCount == 5">
            <![CDATA[ temp.loan_count >= #{loanCount} ]]>
        </if>
        <if test="loanCount &lt; 5">
            temp.loan_count = #{loanCount}
        </if>
        ORDER BY temp.total_amount DESC
        LIMIT #{startIndex}, #{pageSize}
    </select>

    <select id="queryInvestViscosityDetailCount" parameterType="map" resultType="int">
        select
            count(temp.login_name)
        from (
            select
                i.login_name,
                count(distinct i.loan_id) as loan_count
            from invest i
                <if test="province != null and province !=''">
                    inner join `user` uu
                    on i.login_name = uu.login_name
                </if>
            where
                i.status='SUCCESS'
                AND i.created_time between #{startTime} and #{endTime}
                <if test="province != null and province !=''">
                    and uu.province = #{province}
                </if>
            group by i.login_name
            ) temp
        WHERE
        <if test="loanCount == 5">
            <![CDATA[ temp.loan_count >= #{loanCount} ]]>
        </if>
        <if test="loanCount &lt; 5">
            temp.loan_count = #{loanCount}
        </if>
    </select>

    <select id="queryInvestViscositySumAmount" parameterType="map" resultType="long">
        select
            IFNULL(SUM(temp.total_amount),0) as sum_amount
        from (
            select
                i.login_name,
                IFNULL(SUM(i.amount),0) as total_amount,
                count(distinct i.loan_id) as loan_count
            from invest i
                <if test="province != null and province !=''">
                    inner join `user` uu
                    on i.login_name = uu.login_name
                </if>
            where
                i.status='SUCCESS'
                AND i.created_time between #{startTime} and #{endTime}
                <if test="province != null and province !=''">
                    and uu.province = #{province}
                </if>
            group by i.login_name
        ) temp
        WHERE
            <if test="loanCount == 5">
                <![CDATA[ temp.loan_count >= #{loanCount} ]]>
            </if>
            <if test="loanCount &lt; 5">
                temp.loan_count = #{loanCount}
            </if>
    </select>

    <select id="queryUserInvestCountTrend" parameterType="map" resultMap="keyValueMap">
        select
            DATE_FORMAT(i.`created_time`,'%H') AS `name`,
            count(1) as `value`,
            u.province as `group`
        from user u
        join invest i
        on u.login_name = i.login_name
        <choose>
            <when test="province != null and province!= ''">
                where u.province = #{province}
            </when>
            <otherwise>
                where exists (
                select 1 from (
                    select uu.province
                    from invest ii
                    join user uu on uu.login_name=ii.login_name
                    where
                      ii.status='SUCCESS'
                      and ii.created_time between #{startTime} and #{endTime}
                    group by uu.province
                    order by count(ii.id)
                    desc limit 5
                ) temp
                where temp.province=u.province
                )
            </otherwise>
        </choose>
        and i.status='SUCCESS'
        and i.created_time between #{startTime} and #{endTime}
        group by u.province, `name`
        <if test="province == null or province ==''">
            union all
            select
                DATE_FORMAT(i.`created_time`,'%H') AS `name`,
                count(1) as `value`,
                '其它' as `group`
            from user u
            join invest i
            on u.login_name = i.login_name
            where not exists (
                select 1 from (
                    select uu.province
                    from invest ii
                    join user uu on uu.login_name=ii.login_name
                    where
                      ii.status='SUCCESS'
                      and ii.created_time between #{startTime} and #{endTime}
                    group by uu.province
                    order by count(ii.id)
                    desc limit 5
                ) temp
                where temp.province=u.province
            )
            and i.status='SUCCESS'
            and i.created_time between #{startTime} and #{endTime}
            group by `name`
        </if>
    </select>

    <select id="queryUserInvestAmountTrend" parameterType="map" resultMap="keyValueMap">
        select
            <if test="granularity.name() == 'Daily'">
                DATE(i.created_time) AS `name`,
            </if>
            <if test="granularity.name() == 'Weekly'">
                DATE_FORMAT(i.created_time,'%Y-W%u') AS `name`,
            </if>
            <if test="granularity.name() == 'Monthly'">
                DATE_FORMAT(i.created_time,'%Y-%m') AS `name`,
            </if>
            ROUND(IFNULL(SUM(i.amount), 0)/100, 2) as `value`,
            u.province as `group`
        from
        <if test="roleStage.name() == 'ALL' ">
            user u
        </if>
        <if test="roleStage.name() == 'STAFF' ">
            (SELECT
            j.*
            FROM
            user j
            JOIN
            (SELECT
            h.login_name
            FROM
            user_role h
            WHERE h.role = 'STAFF') gg
            ON j.`login_name` = gg.login_name) u
        </if>
        <if test="roleStage.name() == 'RECOMMENDATION' ">
            (SELECT
            j.*
            FROM
            user j
            JOIN
            (SELECT
            k.`login_name`
            FROM
            user_role o
            RIGHT JOIN referrer_relation k
            ON o.`login_name` = k.`referrer_login_name`
            AND k.`level` = 1
            WHERE o.`role` = 'STAFF') gg
            ON j.`login_name` = gg.login_name) u
        </if>
        <if test="roleStage.name() == 'AGENT' ">
            (SELECT
            j.*
            FROM
            user j
            JOIN
            (SELECT
            o.`login_name`
            FROM
            user_role o
            WHERE o.`role` = 'AGENT'
            GROUP BY o.`login_name`) oo
            ON j.`login_name` = oo.login_name) u
        </if>
        <if test="roleStage.name() == 'NORMAL_USER' ">
            (SELECT
            j.*
            FROM
            user j
            WHERE NOT EXISTS
            (SELECT
            1
            FROM
            (SELECT
            *
            FROM
            (SELECT
            k.`login_name`
            FROM
            user_role o
            RIGHT JOIN referrer_relation k
            ON o.`login_name` = k.`referrer_login_name`
            AND k.`level` = 1
            WHERE o.`role` = 'STAFF'
            UNION
            SELECT
            h.login_name
            FROM
            user_role h
            WHERE h.role IN ('STAFF', 'AGENT')) ff) gg
            WHERE gg.login_name = j.`login_name`)) u
        </if>
        join invest i
        on u.login_name = i.login_name
        <choose>
            <when test="province != null and province!= ''">
                where u.province = #{province}
            </when>
            <otherwise>
                where exists (
                    select 1 from (
                        select
                          uu.province as province,
                          IFNULL(SUM(ii.amount), 0) as amount
                        from invest ii
                        join
                        <if test="roleStage.name() == 'ALL' ">
                            user uu
                        </if>
                        <if test="roleStage.name() == 'STAFF' ">
                            (SELECT
                            j.*
                            FROM
                            user j
                            JOIN
                            (SELECT
                            h.login_name
                            FROM
                            user_role h
                            WHERE h.role = 'STAFF') gg
                            ON j.`login_name` = gg.login_name) uu
                        </if>
                        <if test="roleStage.name() == 'RECOMMENDATION' ">
                            (SELECT
                            j.*
                            FROM
                            user j
                            JOIN
                            (SELECT
                            k.`login_name`
                            FROM
                            user_role o
                            RIGHT JOIN referrer_relation k
                            ON o.`login_name` = k.`referrer_login_name`
                            AND k.`level` = 1
                            WHERE o.`role` = 'STAFF') gg
                            ON j.`login_name` = gg.login_name) uu
                        </if>
                        <if test="roleStage.name() == 'AGENT' ">
                            (SELECT
                            j.*
                            FROM
                            user j
                            JOIN
                            (SELECT
                            o.`login_name`
                            FROM
                            user_role o
                            WHERE o.`role` = 'AGENT'
                            GROUP BY o.`login_name`) oo
                            ON j.`login_name` = oo.login_name) uu
                        </if>
                        <if test="roleStage.name() == 'NORMAL_USER' ">
                            (SELECT
                            j.*
                            FROM
                            user j
                            WHERE NOT EXISTS
                            (SELECT
                            1
                            FROM
                            (SELECT
                            *
                            FROM
                            (SELECT
                            k.`login_name`
                            FROM
                            user_role o
                            RIGHT JOIN referrer_relation k
                            ON o.`login_name` = k.`referrer_login_name`
                            AND k.`level` = 1
                            WHERE o.`role` = 'STAFF'
                            UNION
                            SELECT
                            h.login_name
                            FROM
                            user_role h
                            WHERE h.role IN ('STAFF', 'AGENT')) ff) gg
                            WHERE gg.login_name = j.`login_name`)) uu
                        </if>
                          on uu.login_name=ii.login_name
                        where
                          ii.status='SUCCESS'
                          and ii.created_time between #{startTime} and #{endTime}
                        group by province
                        order by amount desc
                        limit 5
                    ) temp
                    where temp.province=u.province
                )
            </otherwise>
        </choose>
        and i.status='SUCCESS'
        and i.created_time between #{startTime} and #{endTime}
        <if test="channel !=null and channel != '' and channel != '其他' ">
            and u.channel = #{channel}
        </if>
        <if test="channel == '其他'" >
            and u.channel IS NULL
        </if>
        group by u.province, `name`
        <if test="province == null or province ==''">
            union all
            select
            <if test="granularity.name() == 'Daily'">
                DATE(i.created_time) AS `name`,
            </if>
            <if test="granularity.name() == 'Weekly'">
                DATE_FORMAT(i.created_time,'%Y-W%u') AS `name`,
            </if>
            <if test="granularity.name() == 'Monthly'">
                DATE_FORMAT(i.created_time,'%Y-%m') AS `name`,
            </if>
            <if test="granularity.name() == 'Hourly'">
                DATE_FORMAT(i.`created_time`,'%H') AS `name`,
            </if>
            ROUND(IFNULL(SUM(i.amount), 0)/100, 2) as `value`,
            '其它' as `group`
            from
            <if test="roleStage.name() == 'ALL' ">
                user u
            </if>
            <if test="roleStage.name() == 'STAFF' ">
                (SELECT
                j.*
                FROM
                user j
                JOIN
                (SELECT
                h.login_name
                FROM
                user_role h
                WHERE h.role = 'STAFF') gg
                ON j.`login_name` = gg.login_name) u
            </if>
            <if test="roleStage.name() == 'RECOMMENDATION' ">
                (SELECT
                j.*
                FROM
                user j
                JOIN
                (SELECT
                k.`login_name`
                FROM
                user_role o
                RIGHT JOIN referrer_relation k
                ON o.`login_name` = k.`referrer_login_name`
                AND k.`level` = 1
                WHERE o.`role` = 'STAFF') gg
                ON j.`login_name` = gg.login_name) u
            </if>
            <if test="roleStage.name() == 'AGENT' ">
                (SELECT
                j.*
                FROM
                user j
                JOIN
                (SELECT
                o.`login_name`
                FROM
                user_role o
                WHERE o.`role` = 'AGENT'
                GROUP BY o.`login_name`) oo
                ON j.`login_name` = oo.login_name) u
            </if>
            <if test="roleStage.name() == 'NORMAL_USER' ">
                (SELECT
                j.*
                FROM
                user j
                WHERE NOT EXISTS
                (SELECT
                1
                FROM
                (SELECT
                *
                FROM
                (SELECT
                k.`login_name`
                FROM
                user_role o
                RIGHT JOIN referrer_relation k
                ON o.`login_name` = k.`referrer_login_name`
                AND k.`level` = 1
                WHERE o.`role` = 'STAFF'
                UNION
                SELECT
                h.login_name
                FROM
                user_role h
                WHERE h.role IN ('STAFF', 'AGENT')) ff) gg
                WHERE gg.login_name = j.`login_name`)) u
            </if>
            join invest i
            on u.login_name = i.login_name
            where not exists (
                select 1 from (
                    select
                        uu.province as province,
                        IFNULL(SUM(ii.amount), 0) as amount
                    from invest ii
                    join
                    <if test="roleStage.name() == 'ALL' ">
                        user uu
                    </if>
                    <if test="roleStage.name() == 'STAFF' ">
                        (SELECT
                        j.*
                        FROM
                        user j
                        JOIN
                        (SELECT
                        h.login_name
                        FROM
                        user_role h
                        WHERE h.role = 'STAFF') gg
                        ON j.`login_name` = gg.login_name) uu
                    </if>
                    <if test="roleStage.name() == 'RECOMMENDATION' ">
                        (SELECT
                        j.*
                        FROM
                        user j
                        JOIN
                        (SELECT
                        k.`login_name`
                        FROM
                        user_role o
                        RIGHT JOIN referrer_relation k
                        ON o.`login_name` = k.`referrer_login_name`
                        AND k.`level` = 1
                        WHERE o.`role` = 'STAFF') gg
                        ON j.`login_name` = gg.login_name) uu
                    </if>
                    <if test="roleStage.name() == 'AGENT' ">
                        (SELECT
                        j.*
                        FROM
                        user j
                        JOIN
                        (SELECT
                        o.`login_name`
                        FROM
                        user_role o
                        WHERE o.`role` = 'AGENT'
                        GROUP BY o.`login_name`) oo
                        ON j.`login_name` = oo.login_name) uu
                    </if>
                    <if test="roleStage.name() == 'NORMAL_USER' ">
                        (SELECT
                        j.*
                        FROM
                        user j
                        WHERE NOT EXISTS
                        (SELECT
                        1
                        FROM
                        (SELECT
                        *
                        FROM
                        (SELECT
                        k.`login_name`
                        FROM
                        user_role o
                        RIGHT JOIN referrer_relation k
                        ON o.`login_name` = k.`referrer_login_name`
                        AND k.`level` = 1
                        WHERE o.`role` = 'STAFF'
                        UNION
                        SELECT
                        h.login_name
                        FROM
                        user_role h
                        WHERE h.role IN ('STAFF', 'AGENT')) ff) gg
                        WHERE gg.login_name = j.`login_name`)) uu
                    </if>
                    on uu.login_name=ii.login_name
                    where
                        ii.status='SUCCESS'
                        and ii.created_time between #{startTime} and #{endTime}
                    group by province
                    order by amount desc
                    limit 5
                ) temp
                where temp.province=u.province
            )
            and i.status='SUCCESS'
            and i.created_time between #{startTime} and #{endTime}
            <if test="channel !=null and channel != '' and channel != '其他' ">
                and u.channel = #{channel}
            </if>
            <if test="channel == '其他'" >
                and u.channel IS NULL
            </if>
            group by `name`
        </if>
    </select>

    <select id="queryUserAgeTrend" parameterType="map" resultMap="keyValueMap">
        select
            <![CDATA[if(age<20,'20 岁以下',if(age<35,'20~35 岁',if(age<50,'35~50 岁','50 岁以上')))]]> as `name`,
            count(1) as `value`,
            <choose>
                <when test="province != null and province!= ''"> #{province} </when>
                <otherwise> "全部" </otherwise>
            </choose> as `group`
        from
            (
                select date_format(now(),'%Y')-if(length(identity_number)=18,substring(identity_number,7,4),1900+substring(identity_number,7,2)) as age
                from
                    account a
                <if test="province != null and province !=''">
                join user u
                    on a.login_name=u.login_name
                    and u.province=#{province}
                </if>
                where
                    length(identity_number) in (15,18)
                    and a.register_time between #{startTime} and #{endTime}
                    <if test="isInvestor=='true'">
                    and exists
                        (
                            select 1 from invest i where i.login_name=a.login_name
                        )
                    </if>
            ) temp
        group by `name`;
    </select>

    <select id="queryLoanAmountDistribution" parameterType="map" resultMap="keyValueMap">
        SELECT
          loan.periods AS `name`,
          ROUND(SUM(invest.amount / 100), 2) AS `value`
        FROM
          loan
          JOIN invest
            ON loan.id = invest.loan_id
            AND invest.`status` = 'SUCCESS'
            AND invest.`transfer_invest_id` IS NULL
            AND invest.`invest_time` BETWEEN #{startTime} and #{endTime}
        WHERE loan.`status` IN (
            'RAISING',
            'RECHECK',
            'REPAYING',
            'COMPLETE',
            'OVERDUE'
          )
          AND loan.`product_type` != 'EXPERIENCE'
        GROUP BY loan.periods
        ORDER BY `name` ;
    </select>

    <select id="queryLoanRaisingTimeCostingTrend" parameterType="map" resultMap="keyValueMap">
        select
            periods as `name`,
            GROUP_CONCAT(TIMESTAMPDIFF(HOUR,fundraising_start_time,raising_complete_time) ORDER BY TIMESTAMPDIFF(HOUR,fundraising_start_time,raising_complete_time) ASC) as `value`,
            ROUND(SUM(TIMESTAMPDIFF(HOUR,fundraising_start_time,raising_complete_time))/COUNT(1),0) as `group`
        from
            loan
        where
            fundraising_start_time is not null
            AND raising_complete_time is not null
            AND created_time between #{startTime} and #{endTime}
        group by periods
        order by `name` asc
    </select>

    <select id="queryWithdrawUserCountTrend" parameterType="map" resultMap="keyValueMap">
        select
        <if test="granularity.name() == 'Daily'">
            DATE(created_time) AS `name`,
        </if>
        <if test="granularity.name() == 'Weekly'">
            DATE_FORMAT(created_time, '%Y-W%u') AS `name`,
        </if>
        <if test="granularity.name() == 'Monthly'">
            DATE_FORMAT(created_time, '%Y-%m') AS `name`,
        </if>
        count(distinct(login_name)) AS `value`,
        '提现人数' AS `group`

        from withdraw where status = 'SUCCESS'

        and created_time between #{startTime} and #{endTime}

        group by
        <if test="granularity.name() == 'Daily'">
            date(created_time)
        </if>
        <if test="granularity.name() == 'Weekly'">
            year(created_time), week(created_time)
        </if>
        <if test="granularity.name() == 'Monthly'">
            year(created_time), month(created_time)
        </if>
    </select>

    <select id="queryRepayByRecheckTimeAndActualRepayDate" parameterType="map" resultMap="keyValueMap">
        SELECT
            ROUND(IFNULL(SUM(r.corpus + r.expected_interest + r.default_interest),0)/ 100, 2) AS `value`,
            DATE(#{startTime}) AS `name`,
            '待收' as `group`
        FROM
            loan l
                LEFT JOIN
            loan_repay r ON l.id = r.loan_id
        WHERE
            l.status IN ('REPAYING' , 'COMPLETE', 'OVERDUE')
            AND l.recheck_time &lt; #{startTime}
            AND (r.actual_repay_date > #{startTime} or actual_repay_date is null)
    </select>
</mapper>
