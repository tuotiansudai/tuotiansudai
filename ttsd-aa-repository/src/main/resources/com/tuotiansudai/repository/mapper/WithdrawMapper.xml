<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.tuotiansudai.repository.mapper.WithdrawMapper">

    <resultMap id="withdrawResultMap" type="WithdrawModel">
        <id column="withdraw_id" property="id"></id>
        <result column="withdraw_bank_card_id" property="bankCardId"></result>
        <result column="withdraw_login_name" property="loginName"></result>
        <result column="withdraw_amount" property="amount"></result>
        <result column="withdraw_fee" property="fee"></result>
        <result column="withdraw_apply_notify_message" property="applyNotifyMessage"></result>
        <result column="withdraw_apply_notify_time" property="applyNotifyTime"></result>
        <result column="withdraw_notify_message" property="notifyMessage"></result>
        <result column="withdraw_notify_time" property="notifyTime"></result>
        <result column="withdraw_status" property="status"></result>
        <result column="withdraw_source" property="source"></result>
        <result column="withdraw_created_time" property="createdTime"></result>
        <association property="bankCard" javaType="BankCardModel">
            <id column="bank_card_id" property="id"></id>
            <result column="bank_card_bank_code" property="bankCode"></result>
            <result column="bank_card_card_number" property="cardNumber"></result>
            <result column="bank_card_created_time" property="createdTime"></result>
            <result column="bank_card_status" property="status"></result>
            <result column="bank_card_login_name" property="loginName"></result>
            <result column="bank_card_is_fast_pay_on" property="isFastPayOn"></result>
        </association>
    </resultMap>

    <resultMap id="withdrawResultView" type="WithdrawPaginationView" extends="withdrawResultMap">
        <result column="user_name" property="userName"></result>
        <result column="mobile" property="mobile"></result>
        <result column="is_staff" property="isStaff"></result>
    </resultMap>

    <sql id="columns">
        withdraw.id as withdraw_id,
        withdraw.bank_card_id as withdraw_bank_card_id,
        withdraw.login_name as withdraw_login_name,
        withdraw.amount as withdraw_amount,
        withdraw.fee as withdraw_fee,
        withdraw.apply_notify_message as withdraw_apply_notify_message,
        withdraw.apply_notify_time as withdraw_apply_notify_time,
        withdraw.notify_message as withdraw_notify_message,
        withdraw.notify_time as withdraw_notify_time,
        withdraw.status as withdraw_status,
        withdraw.source as withdraw_source,
        withdraw.created_time as withdraw_created_time,
        bank_card.id as bank_card_id,
        bank_card.bank_code as bank_card_bank_code,
        bank_card.card_number as bank_card_card_number,
        bank_card.created_time as bank_card_created_time,
        bank_card.status as bank_card_status,
        bank_card.login_name as bank_card_login_name,
        bank_card.is_fast_pay_on as bank_card_is_fast_pay_on
    </sql>

    <insert id="create" parameterType="WithdrawModel">
        insert into withdraw (id, bank_card_id, login_name, amount, fee, status, source, created_time, updated_time)
        value(#{id}, #{bankCardId}, #{loginName}, #{amount}, #{fee}, #{status}, #{source}, #{createdTime}, now())
    </insert>

    <select id="findById" parameterType="long" resultMap="withdrawResultMap">
        select <include refid="columns"></include> from withdraw join bank_card on withdraw.bank_card_id = bank_card.id where withdraw.id = #{id}
    </select>

    <update id="update" parameterType="WithdrawModel">
        update withdraw
        <set>
            updated_time = now(),
            <if test="status != null">status = #{status},</if>
            <if test="applyNotifyTime != null">apply_notify_time = #{applyNotifyTime},</if>
            <if test="applyNotifyMessage != null">apply_notify_message = #{applyNotifyMessage},</if>
            <if test="notifyTime != null">notify_time = #{notifyTime},</if>
            <if test="notifyMessage != null">notify_message = #{notifyMessage}</if>
        </set>
        where id = #{id}
    </update>

    <select id="findSumSuccessWithdrawByLoginName" parameterType="java.lang.String" resultType="long">
        select IFNULL(sum(amount), 0) as amount from withdraw where status = 'SUCCESS' and login_name = #{loginName}
    </select>

    <select id="findWithdrawPagination" parameterType="map" resultMap="withdrawResultView">
        select <include refid="columns"></include>,
        u.user_name,
        u.mobile,
        IFNULL((select 1 from user_role ur where ur.login_name = withdraw.login_name and ur.role = 'STAFF'),0) as is_staff
        from withdraw
        join bank_card on withdraw.bank_card_id = bank_card.id
        JOIN `user` u on withdraw.login_name = u.login_name
        <if test="mobile != null and mobile != ''">
            and u.mobile = #{mobile}
        </if>
        <where>
            <if test="withdrawId != null and withdrawId != ''">
                and withdraw.id = #{withdrawId}
            </if>
            <if test="startTime !=null" >
                and withdraw.created_time >= #{startTime}
            </if>
            <if test="endTime !=null ">
                and withdraw.created_time &lt;= #{endTime}
            </if>
            <if test="status !=null">
                and withdraw.status = #{status}
            </if>
            <if test="source !=null">
                and withdraw.source = #{source}
            </if>
        </where>
        order by withdraw.created_time desc, withdraw.id asc
        limit #{index}, #{pageSize}
    </select>

    <select id="findWithdrawCount" parameterType="map" resultType="int">
        select count(1) from withdraw join bank_card on withdraw.bank_card_id = bank_card.id
        join user on withdraw.login_name = user.login_name
        <if test="mobile != null and mobile != '' ">
            and user.mobile = #{mobile}
        </if>
        <where>
            <if test="withdrawId != null and withdrawId != '' ">
                and withdraw.id = #{withdrawId}
            </if>
            <if test="startTime !=null" >
                and withdraw.created_time >= #{startTime}
            </if>
            <if test="endTime !=null ">
                and withdraw.created_time &lt;= #{endTime}
            </if>
            <if test="status !=null">
                and withdraw.status = #{status}
            </if>
            <if test="source !=null">
                and withdraw.source = #{source}
            </if>
        </where>
    </select>

    <select id="findSumWithdrawAmount" parameterType="map" resultType="long">
        select IFNULL(SUM(withdraw.amount),0) as amount
        from withdraw join bank_card on withdraw.bank_card_id = bank_card.id
        join user on withdraw.login_name = user.login_name
        <if test="mobile != null and mobile != ''">
            and user.mobile = #{mobile}
        </if>
        <if test="role !=null">
            join user_role ur on withdraw.login_name = ur.login_name and ur.role= #{role}
        </if>
        <where>
            <if test="withdrawId != null and withdrawId != ''">
                and withdraw.id = #{withdrawId}
            </if>
            <if test="startTime !=null" >
                and withdraw.created_time >= #{startTime}
            </if>
            <if test="endTime !=null ">
                and withdraw.created_time &lt;= #{endTime}
            </if>
            <if test="status !=null">
                and withdraw.status = #{status}
            </if>
            <if test="source !=null">
                and withdraw.source = #{source}
            </if>
        </where>
    </select>

    <select id="findSumWithdrawFee" parameterType="map" resultType="long">
        select IFNULL(SUM(withdraw.fee),0) as amount
        from withdraw join bank_card on withdraw.bank_card_id = bank_card.id
        join user on withdraw.login_name = user.login_name
        <if test="mobile != null and mobile != ''">
            and user.mobile = #{mobile}
        </if>
        <where>
            <if test="withdrawId != null and withdrawId != ''">
                and withdraw.id = #{withdrawId}
            </if>
            <if test="startTime !=null" >
                and withdraw.created_time >= #{startTime}
            </if>
            <if test="endTime !=null ">
                and withdraw.created_time &lt;= #{endTime}
            </if>
            <if test="status !=null">
                and withdraw.status = #{status}
            </if>
            <if test="source !=null">
                and withdraw.source = #{source}
            </if>
        </where>
    </select>
</mapper>