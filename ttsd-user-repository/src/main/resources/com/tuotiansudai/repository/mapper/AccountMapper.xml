<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.tuotiansudai.repository.mapper.AccountMapper">

    <cache eviction="LRU" type="com.tuotiansudai.cache.MybatisRedisCache" />

    <resultMap id="accountResultMap" type="AccountModel">
        <id column="id" property="id"/>
        <result column="login_name" property="loginName"/>
        <result column="pay_user_id" property="payUserId"/>
        <result column="pay_account_id" property="payAccountId"/>
        <result column="balance" property="balance"/>
        <result column="freeze" property="freeze"/>
        <result column="point" property="point"/>
        <result column="register_time" property="registerTime"/>
        <result column="auto_invest" property="autoInvest"/>
        <result column="auto_repay" property="autoRepay"/>
        <result column="no_password_invest" property="noPasswordInvest"/>
        <result column="membership_point" property="membershipPoint"/>
    </resultMap>

    <insert id="create" parameterType="AccountModel" useGeneratedKeys="true" keyProperty="id">
        insert into account (login_name, pay_user_id, pay_account_id, balance, freeze, point, register_time, membership_point)
        value(#{loginName}, #{payUserId}, #{payAccountId}, #{balance}, #{freeze}, #{point}, #{registerTime}, #{membershipPoint})
    </insert>

    <select id="findByLoginName" parameterType="string" resultMap="accountResultMap">
        select * from account where login_name = #{loginName}
    </select>

    <select id="findByMobile" parameterType="string" resultMap="accountResultMap">
        select account.* from account join user on account.login_name = user.login_name where user.mobile = #{mobile}
    </select>

    <select id="findByPayUserId" parameterType="string" resultMap="accountResultMap">
        select * from account where pay_user_id = #{payUserId}
    </select>

    <select id="lockByLoginName" parameterType="string" resultMap="accountResultMap" useCache="false">
        select * from account where login_name = #{loginName} for update
    </select>

    <update id="update" parameterType="AccountModel">
        update account set
          balance = #{balance},
          freeze = #{freeze},
          auto_invest = #{autoInvest},
          auto_repay = #{autoRepay},
          no_password_invest = #{noPasswordInvest},
          point = #{point},
          membership_point = #{membershipPoint}
        where login_name = #{loginName}
    </update>

    <select id="findLoginNames" resultType="string">
        select login_name from account
    </select>

    <select id="findUsersAccountPoint" parameterType="map" resultMap="accountResultMap">
        SELECT *
        FROM account
        <where>
            <if test="loginName != null and loginName != '' ">
                AND account.login_name = #{loginName}
            </if>
            <if test="userName != null and userName != '' ">
                AND EXISTS (select 1 from user where user.login_name = account.login_name and user.user_name = #{userName})
            </if>
            <if test="mobile != null and mobile != '' ">
                AND EXISTS (select 1 from user where user.login_name = account.login_name and user.mobile = #{mobile})
            </if>
        </where>
        ORDER BY account.point DESC
        <if test="startLimit != null and endLimit != null">
        limit #{startLimit}, #{endLimit}
        </if>
    </select>

    <select id="findUsersAccountPointCount" parameterType="map" resultType="int">
        SELECT COUNT(1)
        FROM account
        <where>
            <if test="loginName != null and loginName != '' ">
                AND account.login_name = #{loginName}
            </if>
            <if test="userName != null and userName != '' ">
                AND EXISTS (select 1 from user where user.login_name = account.login_name and user.user_name = #{userName})
            </if>
            <if test="mobile != null and mobile != '' ">
                AND EXISTS (select 1 from user where user.login_name = account.login_name and user.mobile = #{mobile})
            </if>
        </where>
    </select>

    <select id="count" resultType="long">
        select count(1) from account
    </select>

    <select id="findAccountWithBalance" parameterType="map" resultMap="accountResultMap">
        select id,login_name, balance,register_time from account
        <where>
            <if test="startTime != null and startTime != ''">
                register_time >= #{startTime}
            </if>
        </where>
        order by register_time asc
        limit #{offset}
    </select>
</mapper>